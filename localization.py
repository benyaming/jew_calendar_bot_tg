# -*- coding: utf-8 -*-
import data


# –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–Ø –î–õ–Ø –î–ê–§ –ô–û–ú–ò
class DafYomi(object):

    titles = {
        'Russian': '–î–ê–§ –ô–û–ú–ò',
        'English': 'DAF YOMI',
        'Hebrew': '◊ì◊£ ◊ô◊ï◊û'
    }

    @staticmethod
    def get_str(lang: str, masechta: str, daf: str) -> str:
        responses = {
            'Russian': f'–¢—Ä–∞–∫—Ç–∞—Ç: | {data.talmud[masechta]}\n'
                       f'–õ–∏—Å—Ç: |{daf}',
            'English': f'Masechta: |{masechta}\n'
                       f'Daf: |{daf}',
            'Hebrew': f'*◊ì◊£ ◊ô◊ï◊û◊ô*\n\nüìó *◊û◊°◊õ◊™◊ê:* {data.talmud_he[masechta]}\n '
                      f'üìÑ *◊ì◊£*: {daf}'
        }
        daf_str = responses.get(lang, '')
        return daf_str


# –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–Ø –î–õ–Ø –†–û–® –•–û–î–ï–®–ê
class RoshHodesh(object):

    titles = {
        'Russian': '–†–û–® –•–û–î–ï–®',
        'English': 'ROSH CHODESH',
        'Hebrew': '◊®◊ê◊© ◊ó◊ï◊ì◊©'
    }

    # –µ—Å–ª–∏ –¥–≤–∞ –¥–Ω—è –†–• –≤ —Ä–∞–∑–Ω—ã—Ö –≥–æ–¥–∞—Ö
    @staticmethod
    def two_days_in_different_years(
            lang: str,
            first_year: int,
            second_year: int
    ) -> str:
        responses = {
            'Russian': f'31 –¥–µ–∫–∞–±—Ä—è {first_year} –∏ *1 '
                       f'—è–Ω–≤–∞—Ä—è {second_year}*',
            'English': f'31 December {first_year} and *1 '
                       f'January {second_year}*',
            'Hebrew': f' ◊ï {first_year} ◊ë◊ì◊¶◊û◊ë◊® 31'
                      f'{second_year} ◊ë◊ô◊†◊ï◊ê◊®'
        }
        rh_days = responses.get(lang, '')
        return rh_days

    # –µ—Å–ª–∏ 2 –¥–Ω—è –†–• –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—è—Ü–∞—Ö, –Ω–æ –≤ –æ–¥–Ω–æ–º –≥–æ–¥—É
    @staticmethod
    def two_days_in_different_months(
            lang: str,
            first_day: int,
            first_month: int,
            second_month: int,
            year: int
    ) -> str:
        responses = {
            'Russian': f'{first_day} –∏ 1 {data.gr_months_index[first_month]} '
                       f'–∏ {data.gr_months_index[second_month]} {year}*',
            'English': f'{first_day} and 1 '
                       f'{data.gr_months_index_en[first_month]}'
                       f' and {data.gr_months_index_en[second_month]} {year}*',
            'Hebrew':  f'{first_day} ◊ï 1 '
                       f'{data.gr_months_index_he[first_month]}'
                       f' ◊ï {data.gr_months_index_he[second_month]} {year}'
        }
        rh_days = responses.get(lang, '')
        return rh_days

    # –µ—Å–ª–∏ –≤ –†–• 2 –¥–Ω—è
    @staticmethod
    def two_days(
            lang: str,
            first_day: int,
            second_day: int,
            month: int,
            year: int
    ) -> str:
        responses = {
            'Russian': f'{first_day} –∏ {second_day} '
                       f'{data.gr_months_index[month]} {year}*',
            'English': f'{first_day} and {second_day} '
                       f'{data.gr_months_index_en[month]} {year}*',
            'Hebrew': f'{first_day} ◊ï {second_day} '
                      f'{data.gr_months_index_he[month]} {year}'
        }
        rh_days = responses.get(lang, '')
        return rh_days

    # –µ—Å–ª–∏ –≤ –†–• 1 –¥–µ–Ω—å –≤—ã–ø–∞–¥–∞–µ—Ç –Ω–∞ 1 —è–Ω–≤–∞—Ä—è
    @staticmethod
    def one_day_first_day_of_jan(lang: str, year: int) -> str:
        responses = {
            'Russian': f'1 —è–Ω–≤–∞—Ä—è {year}',
            'English': f'1 January {year}',
            'Hebrew': f'1 {year} ◊ë◊ô◊†◊ï◊ê◊®'
        }
        rh_days = responses.get(lang, '')
        return rh_days

    # –µ—Å–ª–∏ –≤ –†–• 1 –¥–µ–Ω—å –≤—ã–ø–∞–¥–∞–µ—Ç –Ω–∞ –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞
    @staticmethod
    def one_day_first_day_of_month(
            lang: str,
            month: int,
            year: int
    ) -> str:
        responses = {
            'Russian': f'1 {data.gr_months_index[month]} {year}',
            'English': f'1 {data.gr_months_index_en[month]} {year}',
            'Hebrew': f'1 {data.gr_months_index_he[month]} {year}'
        }
        rh_days = responses.get(lang, '')
        return rh_days

    # –µ—Å–ª–∏ –≤ –†–• 1 –¥–µ–Ω—å
    @staticmethod
    def one_day(
            lang: str,
            day: int,
            month: int,
            year: int
    ) -> str:
        responses = {
            'Russian': f'{day} {data.gr_months_index[month]} {year}',
            'English': f'{day} {data.gr_months_index_en[month]} {year}',
            'Hebrew': f'{day} {data.gr_months_index_he[month]} {year}'
        }
        rh_days = responses.get(lang, '')
        return rh_days

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    @staticmethod
    def get_rh_day_of_week(
            lang: str,
            first_day: int,
            second_day=None
    ) -> str:
        responses = ''
        if second_day:
            responses = {
                'Russian': f'{data.days_ru[first_day]}-'
                           f'{data.days_ru[second_day]}',
                'English': f'{data.days_en[first_day]}-'
                           f'{data.days_en[second_day]}',
                'Hebrew': f'{data.days_he[first_day]}-'
                          f'{data.days_he[second_day]}'
            }
        elif not second_day:
            responses = {
                'Russian': f'{data.days_ru[first_day]}',
                'English': f'{data.days_en[first_day]}',
                'Hebrew': f'{data.days_he[first_day]}'
            }
        day_of_week = responses.get(lang, '')
        return day_of_week

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–ª–∞–¥
    @staticmethod
    def get_molad_str(
            lang: str,
            day: int,
            month: str,
            day_of_week: str,
            nhours: int,
            hours: str,
            nminutes: int,
            nchalakim: int,
            chalakim: str
    ) -> str:
        responses = {
            'Russian': f'{day} {data.gr_months[month]}, '
                       f'{data.gr_dayofweek[day_of_week]},^'
                       f'{nhours} {data.hours.get(hours[-1:], "—á–∞—Å–æ–≤")} '
                       f'{nminutes} '
                       f'{data.minutes.get(nminutes, "–º–∏–Ω—É—Ç")} –∏ '
                       f'{nchalakim} {data.chalakim.get(chalakim, "—á–∞—Å—Ç–µ–π")}',
            'English': f'{day} {month}, {day_of_week},^'
                       f'{nhours} {data.hours_en.get(hours, "hours")} '
                       f'{nminutes} '
                       f'{data.minutes_en.get(nminutes, "minutes")} and '
                       f'{nchalakim} '
                       f'{data.chalakim_en.get(chalakim, "chalakim")}',
            'Hebrew': f'{day} {data.gr_months_he[month]}, '
                      f'{data.gr_dayofweek_he[day_of_week]}, '
                      f'{nhours} {data.hours_he.get(hours, "◊©◊¢◊ï◊™")} '
                      f'{nminutes} '
                      f'{data.minutes_he.get(nminutes, "◊ì◊ß◊ï◊™")} '
                      f'◊ï {nchalakim}'
                      f' {data.chalakim_he.get(chalakim, "◊ó◊ú◊ß◊ô◊ù")}'
        }
        molad_str = responses.get(lang, '')
        return molad_str

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –†–•
    @staticmethod
    def get_rh_str(
            lang: str,
            month: str,
            length: int,
            rosh_hodesh: str,
            molad: str
    ) -> str:
        responses = {
            'Russian': f'–ú–µ—Å—è—Ü: |{data.jewish_months[month]}\n'
                       f'–ß–∏—Å–ª–æ –¥–Ω–µ–π: |{length} '
                       f'{data.length_ru[f"{length}"]}\n'
                       f'–î–∞—Ç–∞: |{rosh_hodesh}\n–ú–æ–ª–∞–¥: |{molad}',
            'English': f'Month: |{month}\n'
                       f'Number of days: |{length} '
                       f'{data.length_en[f"{length}"]}\n'
                       f'Date: |{rosh_hodesh}\nMolad: |{molad}',
            'Hebrew': f'*◊ó◊ï◊ì◊©:* |{data.jewish_months_he[month]}\n'
                      f' *◊û◊©◊ö ◊®◊ê◊© ◊ó◊ï◊ì◊©:* |{length}'
                      f' {data.length_he[f"{length}"]}\n '
                      f'◊®◊ê◊© ◊ó◊ï◊ì◊©: |{rosh_hodesh}\n◊û◊ï◊ú◊ì: |{molad}'
        }
        rh = responses.get(lang, '')
        return rh


# –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–Ø –î–õ–Ø –®–ê–ë–ë–ê–¢–ê
class Shabos(object):
    titles = {
        'Russian': '–®–ê–ë–ë–ê–¢',
        'English': 'SHABBOS',
        'Hebrew': '◊©◊ë◊™'
    }

    # TODO  –æ—à–∏–±–∫–∏ –≤–∏–¥–∞   if parasha == 'PESACH_VIII': parasha = 'PESACH'
    # –¥–ª—è —à–∞–±–±–∞—Ç–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å –∑–º–∞–Ω–∏–º
    @staticmethod
    def shabos_with_latitude_error(lang: str, parasha: str) -> str:
        responses = {
            'Russian': f'–ù–µ–¥–µ–ª—å–Ω–∞—è –≥–ª–∞–≤–∞: |{data.parashat[parasha]}?'
                       f'–í –¥–∞–Ω–Ω—ã—Ö —à–∏—Ä–æ—Ç–∞—Ö –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ\n–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å '
                       f'–∑–º–∞–Ω–∏–º –∏–∑-–∑–∞\n–ø–æ–ª—è—Ä–Ω–æ–≥–æ –¥–Ω—è/–ø–æ–ª—è—Ä–Ω–æ–π –Ω–æ—á–∏.',
            'English': f'Parshat hashavua: |{parasha}?'
                       f'For this location zmanim is impossible\n'
                       f'to determine because of polar night/day.',
            'Hebrew': f'◊§◊®◊©◊™ ◊î◊©◊ë◊ï◊¢: |{data.parashat_he[parasha]}?'
                      f'◊ú◊ê ◊†◊ô◊™◊ü ◊ú◊ß◊ë◊ï◊¢ ◊ê◊™ ◊î◊ñ◊û◊ü ◊ë◊í◊ú◊ú ◊ú◊ô◊ú ◊ß◊ï◊ò◊ë/◊©◊û◊©'
                      f'◊ó◊¶◊ï◊™ ◊ë◊ß◊ï◊ï◊ô ◊î◊®◊ï◊ó◊ë ◊î◊ê◊ú◊ï '
        }
        shabos_str = responses.get(lang, '')
        return shabos_str

    # –¥–ª—è —à–∞–±–±–∞—Ç–æ–≤ –≤ —Å–µ–≤–µ—Ä–Ω—ã—Ö —à–∏—Ä–æ—Ç–∞—Ö —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ —Ä–∞–Ω–Ω–µ–º –∑–∞–∂–∏–≥–∞–Ω–∏–∏
    @staticmethod
    def shabos_with_warning(
            lang: str,
            parasha: str,
            cl: str,
            th: str,
            offset: int
    ) -> str:
        responses = {
            'Russian': f'–ù–µ–¥–µ–ª—å–Ω–∞—è –≥–ª–∞–≤–∞: |{data.parashat[parasha]}\n'
                       f'–ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π: |{cl}\n'
                       f'+({offset} –º–∏–Ω—É—Ç –¥–æ —à–∫–∏–∏)\n'
                       f'–í—ã—Ö–æ–¥ –∑–≤—ë–∑–¥:  |{th}%'
                       f'–í–Ω–∏–º–∞–Ω–∏–µ! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Ç–æ—á–Ω–∏—Ç—å '
                       f'–≤—Ä–µ–º—è \n–∑–∞–∂–∏–≥–∞–Ω–∏—è —Å–≤–µ—á–µ–π —É —Ä–∞–≤–≤–∏–Ω–∞ –æ–±—â–∏–Ω—ã!',
            'English': f'Parshat hashavua: |{parasha}\n'
                       f'Candle lighting: |{cl}\n'
                       f'+({offset} minutes before shekiah)\n'
                       f'Tzeit hakochavim: |{th}%'
                       f'Notice! You should specify time of candle\n'
                       f'lighting with the rabbi of your community.',
            'Hebrew': f'◊§◊®◊©◊™ ◊î◊©◊ë◊ï◊¢: |{data.parashat_he[parasha]}\n'
                      f'◊î◊ì◊ú◊ß◊™ ◊†◊®◊ï◊™: |{cl}\n'
                      f'◊¶◊ê◊™ ◊î◊õ◊ï◊õ◊ë◊ô◊ù: |{th}%'
                      f'!◊ú◊™◊©◊ï◊û◊™ ◊ú◊ë◊ö '
                      f'!◊ô◊© ◊ú◊¢◊ì◊õ◊ü ◊ê◊™ ◊ñ◊û◊ü ◊î◊ì◊ú◊ß◊™ ◊î◊†◊®◊ï◊™ ◊ê◊¶◊ú ◊®◊ë ◊î◊ß◊î◊ô◊ú◊î'
        }
        shabos_str = responses.get(lang, '')
        return shabos_str

    # –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —à–∞–±–±–∞—Ç–æ–≤
    @staticmethod
    def shabos(
            lang: str,
            parasha: str,
            cl: str,
            th: str,
            offset: int
    ) -> str:
        responses = {
            'Russian': f'–ù–µ–¥–µ–ª—å–Ω–∞—è –≥–ª–∞–≤–∞:  | {data.parashat[parasha]}\n'
                       f'–ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π: |{cl}\n'
                       f'+({offset} –º–∏–Ω—É—Ç –¥–æ —à–∫–∏–∏)\n'
                       f'–í—ã—Ö–æ–¥ –∑–≤—ë–∑–¥:  |{th}',
            'English': f'Parshat hashavua: |{parasha}\n'
                       f'Candle lighting: |{cl}\n'
                       f'+({offset} minutes before shekiah)\n'
                       f'Tzeit hakochavim: |{th}',
            'Hebrew': f'◊§◊®◊©◊™ ◊î◊©◊ë◊ï◊¢: |{data.parashat_he[parasha]}\n'
                      f'◊î◊ì◊ú◊ß◊™ ◊†◊®◊ï◊™: |{cl}\n'
                      #TODO
                      f'◊¶◊ê◊™ ◊î◊õ◊ï◊õ◊ë◊ô◊ù: |{th}'
        }
        shabos_str = responses.get(lang, '')
        return shabos_str

    # –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–¥–≤–∏–≥–∞ –∑–∞–∂–∏–≥–∞–Ω–∏–π
    @staticmethod
    def shabos_candle_offset(lang: str) -> str:
        responses = {
            'Russian': '–í—ã–±–µ—Ä–∏—Ç–µ, –∑–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –®–∫–∏–∏ '
                       '–±—É–¥–µ—Ç –∑–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π:',
            'English': 'Choose candle lighting offset before the shekiah',
            'Hebrew': ''  # TODO –ø–µ—Ä–µ–≤–æ–¥
        }
        response = responses.get(lang, '')
        return response

    # –≤—ã–±—Ä–∞–Ω —Ç–æ—Ç –∂–µ —Å–¥–≤–∏–≥
    @staticmethod
    def same_offset_error(lang: str) -> str:
        responses = {
            'Russian': '–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–¥–≤–∏–≥, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.',
            'English': 'To change offset, set another value',
            'Hebrew': ''  # TODO –ø–µ—Ä–µ–≤–æ–¥
        }
        response = responses.get(lang, '')
        return response


# –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–Ø –î–õ–Ø –ó–ú–ê–ù–ò–ú
class Zmanim(object):
    titles = {
        'Russian': '–ó–ú–ê–ù–ò–ú',
        'English': 'ZMANIM',
        'Hebrew': '◊ñ◊û◊†◊ô◊ù'
    }

    # –æ—à–∏–±–∫–∞ –ø–æ–ª—è—Ä–Ω—ã—Ö —à–∏—Ä–æ—Ç
    @staticmethod
    def get_polar_error(lang: str) -> str:
        responses = {
            'Russian': '–í –¥–∞–Ω–Ω—ã—Ö —à–∏—Ä–æ—Ç–∞—Ö –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å '
                       '–∑–º–∞–Ω–∏–º –∏–∑-–∑–∞ –ø–æ–ª—è—Ä–Ω–æ–≥–æ –¥–Ω—è/–ø–æ–ª—è—Ä–Ω–æ–π –Ω–æ—á–∏.',
            'English': 'In these latitudes it is impossible to determine'
                       ' because of polar night/day.',
            'Hebrew': '◊ú◊ê ◊†◊ô◊™◊ü ◊ú◊ß◊ë◊ï◊¢ ◊ê◊™ ◊î◊ñ◊û◊ü ◊ë◊í◊ú◊ú ◊ú◊ô◊ú'
                      ' ◊ß◊ï◊ò◊ë/◊©◊û◊© ◊ó◊¶◊ï◊™ ◊ë◊ß◊ï◊ï◊ô ◊î◊®◊ï◊ó◊ë ◊î◊ê◊ú◊ï'
        }
        error_message = responses.get(lang, '')
        return error_message

    # –æ—à–∏–±–∫–∞ –ø–æ–ª—è—Ä–Ω—ã—Ö —à–∏—Ä–æ—Ç
    @staticmethod
    def get_zmanim_set_error(lang: str) -> str:
        responses = {
            'Russian': '–ù–µ—á–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å. –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –∑–º–∞–Ω–∏–º –≤—ã —Ö–æ—Ç–∏—Ç–µ '
                       '–ø–æ–ª—É—á–∞—Ç—å:',
            'English': 'Nothing to show. Select zmanim that you want to '
                       'receive:',
            'Hebrew': '' #TODO –ø–µ—Ä–µ–≤–æ–¥
        }
        error_message = responses.get(lang, '')
        return error_message

    # –Ω–∞–∑–≤–∞–Ω–∏—è –∑–º–∞–Ω–∏–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    @staticmethod
    def get_zman_name(zman: str, lang: str) -> str:
        zman_names = {
            'Russian': data.zmanim_ru[zman],
            'English': data.zmanim_en[zman],
            'Hebrew': data.zmanim_he[zman]
        }
        zman_name = zman_names.get(lang, '')
        return zman_name


# –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–Ø –î–õ–Ø –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–• –§–£–ù–ö–¶–ò–ô
class Utils(object):

    # –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –ø–æ—Å—Ç–æ–≤
    @staticmethod
    def get_fast_menu(lang: str) -> str:
        responses = {
            'Russian': '–í—ã–±–µ—Ä–∏—Ç–µ:',
            'English': 'Choose:',
            'Hebrew': '◊ë◊ó◊®:'
        }
        response = responses.get(lang, '')
        return response

    # –ø–µ—Ä–µ—à–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    @staticmethod
    def get_main_menu(lang: str) -> str:
        responses = {
            'Russian': '–í—ã–±–µ—Ä–∏—Ç–µ:',
            'English': 'Choose:',
            'Hebrew': '◊ë◊ó◊®:'
        }
        response = responses.get(lang, '')
        return response

    # –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
    @staticmethod
    def get_holiday_menu(lang: str) -> str:
        responses = {
            'Russian': '–í—ã–±–µ—Ä–∏—Ç–µ:',
            'English': 'Choose:',
            'Hebrew': '–ø—Ä–∞–∑–¥–Ω–∏—á–∫–∏' #TODO –ø–µ—Ä–µ–≤–æ–¥
        }
        response = responses.get(lang, '')
        return response

    # –ø–µ—Ä–µ—à–ª–∏ –¥–∞–ª—å—à–µ –ø–æ –º–µ–Ω—é –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
    @staticmethod
    def get_more_holiday_menu(lang: str) -> str:
        responses = {
            'Russian': '–í—ã–±–µ—Ä–∏—Ç–µ:',
            'English': 'Choose:',
            'Hebrew': '◊ë◊ó◊®:'
        }
        response = responses.get(lang, '')
        return response

    # –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    @staticmethod
    def get_settings_menu(lang: str) -> str:
        responses = {
            'Russian': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!',
            'English': 'Welcome to settings!',
            # TODO
        }
        response = responses.get(lang, '')
        return response

    # –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∑–º–∞–Ω–∏–º
    @staticmethod
    def get_zmanim_menu(lang: str) -> str:
        responses = {
            'Russian': '–í—ã–±–µ—Ä–∏—Ç–µ –∑–º–∞–Ω–∏–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
            'English': 'Choose zmanim that will shown',
            'Hebrew': ''  # TODO hebrew
        }
        response = responses.get(lang, '')
        return response

    # f.a.q.
    @staticmethod
    def get_faq(lang: str) -> str:
        responses = {
            'Russian': 'http://telegra.ph/Hebrew-Calendar-Bot-FAQ-05-10',
            'English': 'http://telegra.ph/Hebrew-Calendar-Bot-FAQ-EN-05-10'
            # TODO hebrew
        }
        response = responses.get(lang, '')
        return response

    # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã
    @staticmethod
    def location_received(lang: str) -> str:
        responses = {
            'Russian': '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ '
                       '–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º.',
            'English': 'Location has been received, now you can start '
                       'working with the bot',
            'Hebrew': '◊î◊û◊ô◊ß◊ï◊ù ◊î◊™◊ß◊ë◊ú, ◊õ◊¢◊™ ◊ê◊™◊ù ◊ô◊õ◊ï◊ú◊ô◊ù ◊ú◊î◊™◊ó◊ô◊ú ◊ú◊¢◊ë◊ï◊ì ◊¢◊ù ◊î bot.'
        }
        response = responses.get(lang, '')
        return response

    # –æ—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∑
    @staticmethod
    def failed_check_tz(lang: str) -> str:
        responses = {
            'Russian': '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –í–æ–∑–º–æ–∂–Ω–æ '
                       '–≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –¥–∞–ª–µ–∫–æ –æ—Ç –±–µ—Ä–µ–≥–∞ –∏–ª–∏ —É–∫–∞–∑–∞–ª–∏ '
                       '–Ω–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ'
                       ' –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑',
            'English': 'Time zone could not be determined. –†robably, you'
                       ' –∞re far from —Åoast or indicate incorrect '
                       'coordinates. Try to send your location again.',
            'Hebrew': '◊ê◊ñ◊ï◊® ◊î◊ñ◊û◊ü ◊ú◊ê ◊†◊ô◊™◊ü ◊ú◊ß◊ë◊ô◊¢◊î. ◊õ◊†◊®◊ê◊î ◊©◊î◊ô◊†◊ö ◊®◊ó◊ï◊ß ◊û◊ó◊ï◊£ ◊ê◊ï '
                      '◊©◊û◊¶◊ï◊ô◊†◊ï◊™ ◊†◊ß◊ï◊ì◊ï◊™ ◊¶◊ô◊ï◊ü ◊©◊í◊ï◊ô◊ï◊™. ◊†◊°◊ï ◊ú◊©◊ú◊ï◊ó ◊ê◊™ ◊î◊û◊ô◊ß◊ï◊ù ◊û◊ó◊ì◊©.'

        }
        response = responses.get(lang, '')
        return response

    # –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
    @staticmethod
    def incorrect_text(lang: str) -> str:
        responses = {
            'Russian': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ '
                       '–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö.',
            'English': 'Incorrect command. Please, choose one of the options '
                       'on the buttons',
            'Hebrew': '◊§◊ß◊ï◊ì◊î ◊©◊í◊ï◊ô◊î. ◊†◊ê ◊ú◊ë◊ó◊ï◊® ◊ê◊ó◊™ ◊û◊î◊ê◊§◊©◊®◊ï◊ô◊ï◊™ ◊©◊ë◊ú◊ó◊¶◊†◊ô◊ù.'
        }
        response = responses.get(lang, '')
        return response

    # –∑–∞–ø—Ä–æ—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    @staticmethod
    def request_location(lang: str) -> str:
        responses = {
            'Russian': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –Ω–∞–∂–∞–≤ –Ω–∞ '
                       '–∫–Ω–æ–ø–∫—É.\n*–í–Ω–∏–º–∞–Ω–∏–µ*! Telegram –Ω–∞ –ü–ö –ø–æ–∫–∞ —á—Ç–æ –Ω–µ '
                       '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–∞–∫–∏–º –º–µ—Ç–æ–¥–æ–º. –ß—Ç–æ–±—ã '
                       '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å –ü–ö, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º '
                       '–≤–∏–¥–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä "_55.5, 37.7_", –ª–∏–±–æ '
                       '–ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–µ–æ–º–µ—Ç–∫–æ–π.',
            'English': 'Please, send location by tapping the button.\n'
                       '*Notice* that Telegram on PC is not supported yet '
                       'sending locations in this way. In order to send '
                       'location on PC, send it like text, for example, '
                       '"_55.5, 37.7_", or forward message '
                       'with location here.',
            'Hebrew': '◊†◊ê ◊ú◊©◊ú◊ï◊ó ◊û◊ô◊ß◊ï◊ù ◊¢◊¥◊ô ◊î◊ß◊©◊î ◊¢◊ú ◊î◊õ◊§◊™◊ï◊® . ◊©◊ô◊û◊ï ◊ú◊ë ◊©◊í◊®◊°◊™'
                      ' ◊î◊û◊ó◊©◊ë ◊©◊ú ◊ò◊ú◊í◊®◊ù ◊ú◊ê ◊†◊™◊û◊õ◊™ ◊ë◊©◊ú◊ô◊ó◊™ ◊û◊ô◊ß◊ï◊û◊ô◊ù ◊ë◊ì◊®◊ö ◊ñ◊ï. ◊¢◊ú '
                      '◊û◊†◊™ ◊ú◊©◊ú◊ï◊ó ◊û◊ô◊ß◊ï◊ù ◊¢◊ú ◊û◊ó◊©◊ë, ◊ô◊© ◊ú◊©◊ú◊ï◊ó ◊ê◊ï◊™◊ï ◊ë◊¶◊ï◊®◊î ◊©◊ú ◊ò◊ß◊°◊ò, '
                      '◊ú◊ì◊ï◊í◊û◊ê: ◊¥_55.5, 37.7_◊¥ , ◊ê◊ï ◊ú◊î◊¢◊ë◊ô◊® ◊î◊ï◊ì◊¢◊î ◊¢◊ù ◊î◊û◊ô◊ß◊ï◊ù ◊õ◊ê◊ü.'

        }
        response = responses.get(lang, '')
        return response

    # —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ
    @staticmethod
    def report(lang: str) -> str:
        responses = {
            'Russian': '–ß—Ç–æ–±—ã —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–æ–º—É '
                       '–∏–∑ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: \nt.me/benyomin \nt.me/Meir_Yartzev'
                       '\nt.me/APJIAC \n'
                       '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å —á–∞—Å—Ç–æ '
                       '–∑–∞–¥–∞–≤–∞–µ–º—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø–æ –∫–Ω–æ–ø–∫–µ "–ß–∞–í–æ" ',
            'English': 'For bug report please write to one of developers: \n'
                       't.me/benyomin \nt.me/Meir_Yartzev \nt.me/APJIAC\n'
                       'Please, make sure that you '
                       'had been read F.A.Q. available by "F.A.Q." button',
            'Hebrew': '◊ú◊ì◊ô◊ï◊ï◊ó ◊¢◊ú ◊ë◊ê◊í◊ô◊ù ◊†◊ê ◊ú◊õ◊™◊ï◊ë ◊ú◊ê◊ó◊ì ◊î◊û◊§◊™◊ó◊ô◊ù:'
                      '\nt.me/benyomin\n'
                      't.me/Meir_Y\n'
                      't.me/APJIAC\n'
                      '◊†◊ê ◊ú◊ï◊ï◊ì◊ê ◊©◊ß◊®◊ê◊™ ◊ê◊™ ◊î FAQ (◊©◊ê◊ú◊ï◊™ ◊ï◊™◊©◊ï◊ë◊ï◊™)'
                      ' ◊©◊†◊û◊¶◊ê ◊ë◊õ◊§◊™◊ï◊® ◊î FAQ.'
        }
        response = responses.get(lang, '')
        return response

    # –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –¥–ª—è –∑–º–∞–Ω–∏–º
    @staticmethod
    def request_date(lang: str) -> str:
        responses = {
            'Russian': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã '
                       '—Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å _–∑–º–∞–Ω–∏–º_ *–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì*',
            'English': 'Please enter the date to calculate the _Zmanim_  '
                       'for your selection *in the format DD.MM.YYYY*',
            'Hebres': '◊†◊ê ◊ú◊î◊ñ◊ô◊ü ◊™◊ê◊®◊ô◊ö ◊¢◊ú ◊û◊†◊™ ◊ú◊ó◊©◊ë ◊ê◊™ ◊î_Zmanim_'
                      ' ◊¢◊ë◊ï◊® ◊î◊ë◊ó◊ô◊®◊î ◊©◊ú◊ö ◊ë*◊§◊ï◊®◊û◊ò DD.MM.YYY'
        }
        response = responses.get(lang, '')
        return response

    # –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞
    @staticmethod
    def incorrect_date_format(lang: str) -> str:
        responses = {
            'Russian': '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '
                       '–¥–∞—Ç—É –≤ *—Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì*',
            'English': 'Incorrect date. \nPlease input date *in '
                       'the format DD.MM.YYYY*',
            'Hebrew': '◊î◊™◊ê◊®◊ô◊ö ◊©◊í◊ï◊ô. ◊†◊ê ◊ú◊î◊ñ◊ô◊ü ◊™◊ê◊®◊ô◊ö ◊ë*◊§◊ï◊®◊û◊ò ◊©◊ú DD.MM.YYYY'
        }
        response = responses.get(lang, '')
        return response

    # —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –¥–∞—Ç–µ
    @staticmethod
    def incorrect_date_value(lang: str) -> str:
        responses = {
            'Russian': '–í–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '
                       '–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ *—Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì*',
            'English': 'The date that you entered doesn\'t exist, '
                       'please enter the correct date in format DD.MM.YYYY',
            'Hebrew': '' #TODO –ø–µ—Ä–µ–≤–æ–¥
        }
        response = responses.get(lang, '')
        return response

    # –≤–∫–ª/–æ—Ç–∫–ª –∏–∑—Ä–∞–∏–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º
    @staticmethod
    def diaspora(lang: str, status: bool) -> str:
        if status:
            diaspora_activated = data.diaspora_mode_activated[lang]
        else:
            diaspora_activated = data.diaspora_mode_deactivated[lang]
        responses = {
            'Russian': f'–†–µ–∂–∏–º –¥–∏–∞—Å–ø–æ—Ä—ã {diaspora_activated}\n'
                       f'–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.',
            'English': f'The diaspora mode {diaspora_activated}\n'
                       'For change, press the button.',
            'Hebrew': ''  # TODO –ø–µ—Ä–µ–≤–æ–¥
        }
        response = responses.get(lang, '')
        return response

    @staticmethod
    def diaspora_status_allert(lang: str, status: bool) -> str:
        if status:
            responses = {
                'Russian': '–†–µ–∂–∏–º –¥–∏–∞—Å–ø–æ—Ä—ã –≤–∫–ª—é—á–µ–Ω!',
                'English': 'Diaspora mode enabled!',  #
                'Hebrew': ''  # TODO –ø–µ—Ä–µ–≤–æ–¥
            }
        else:
            responses = {
                'Russian': '–†–µ–∂–∏–º –¥–∏–∞—Å–ø–æ—Ä—ã –≤—ã–∫–ª—é—á–µ–Ω!',
                'English': 'Diaspora mode disabled!',  #
                'Hebrew': ''  # TODO –ø–µ—Ä–µ–≤–æ–¥
            }
        response = responses.get(lang, '')
        return response

    # —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ –º–µ–Ω—é
    @staticmethod
    def help_menu(lang: str) -> str:
        responses = {
            'Russian': '–ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?',
            'English': 'How can I help you?',
            # TODO hebrew
        }
        response = responses.get(lang, '')
        return response


# –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–Ø –î–õ–Ø –ü–†–ê–ó–î–ù–ò–ö–û–í
class Holidays(object):

    titles = {
        'israel_holidays': {
            'Russian': '–ò–ó–†–ê–ò–õ–¨–°–ö–ò–ï –ü–†–ê–ó–î–ù–ò–ö–ò',
            'English': 'ISRAEL HOLIDAYS',
            'Hebrew': ''  # TODO
        },
        'tubishvat': {
            'Russian': '–¢–£ –ë–ò-–®–í–ê–¢',
            'English': 'TU BI-SHVAT',
            'Hebrew': ''  # TODO
        },
        'lagbaomer':  {
            'Russian': '–õ–ê–ì –ë–ê-–û–ú–ï–†',
            'English': 'LAG BA-OMER',
            'Hebrew': ''  # TODO
        },
        'purim': {
            'Russian': '–ü–£–†–ò–ú',
            'English': 'PURIM',
            'Hebrew': ''  # TODO
        },
        'chanuka': {
            'Russian': '–•–ê–ù–£–ö–ê',
            'English': 'CHANUKAH',
            'Hebrew': ''  # TODO
        },
        'succos': {
            'Russian': '–°–£–ö–ö–û–¢',
            'English': 'SUCCOS',
            'Hebrew': ''  # TODO
        },
        'pesah': {
            'Russian': '–ü–ï–ô–°–ê–•',
            'English': 'PESACH',
            'Hebrew': ''  # TODO
        },
        'rosh_hashana': {
            'Russian': '–†–û–® –ê–®–ê–ù–ê',
            'English': 'ROSH HASHANA',
            'Hebrew': ''  # TODO
        },
        'shavuot': {
            'Russian': '–®–ê–í–£–û–¢',
            'English': 'SHAVOUT',
            'Hebrew': ''  # TODO
        },
        'shemini_atzeres': {
            'Russian': '–®–ú–ò–ù–ò –ê–¶–ï–†–ï–¢/–°–ò–ú–•–ê–¢ –¢–û–†–ê',
            'English': 'SHMINI ATZERES/SIMCHAT TORAH',
            'Hebrew': ''  # TODO
        }
    }

    # –ö–æ–≥–¥–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–∞
    @staticmethod
    def polar_area(lang: str) -> str:
        responses = {
            'Russian': '\n–í –¥–∞–Ω–Ω—ã—Ö —à–∏—Ä–æ—Ç–∞—Ö –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å'
                       ' –∑–º–∞–Ω–∏–º –∏–∑-–∑–∞ –ø–æ–ª—è—Ä–Ω–æ–≥–æ –¥–Ω—è/–ø–æ–ª—è—Ä–Ω–æ–π –Ω–æ—á–∏',
            'English': '\nIn these latitudes zmanim is impossible'
                       ' to determine because of polar night/day',
            'Hebrew': '◊ú◊ê ◊†◊ô◊™◊ü ◊ú◊ß◊ë◊ï◊¢ ◊ê◊™ ◊î◊ñ◊û◊ü ◊ë◊í◊ú◊ú ◊ú◊ô◊ú'
                      ' ◊ß◊ï◊ò◊ë/◊©◊û◊© ◊ó◊¶◊ï◊™ ◊ë◊ß◊ï◊ï◊ô ◊î◊®◊ï◊ó◊ë ◊î◊ê◊ú◊ï'
        }
        ra_time = responses.get(lang, '')
        return ra_time

    # –ö–æ–≥–¥–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –ø—Ä–∞–∑–¥–Ω–∏–∫–∞
    @staticmethod
    def lighting(
            lang: str,
            light_day: str,
            light_month: str,
            light_time: str,
            avdala_day: str,
            avdala_month: str,
            avdala_time: str
    ) -> str:
        responses = {
            'Russian': f'–ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π {light_day} '
                       f'{data.gr_months_index[light_month]}: '
                       f'|{light_time:.5s}\n'
                       f'–ê–≤–¥–∞–ª–∞ {avdala_day} '
                       f'{data.gr_months_index[avdala_month]}: '
                       f'|{avdala_time:.5s}',
            'English': f'Candle lighting {light_day} '
                       f'{data.gr_months_index_en[light_month]}: '
                       f'|{light_time:.5s}\n'
                       f'Avdala {avdala_day} '
                       f'{data.gr_months_index_en[avdala_month]}: '
                       f'|{avdala_time:.5s}',
            'Hebrew': f'üïØ ◊î◊ì◊ú◊ß◊™ ◊†◊®◊ï◊™ {light_day}'
                      f' {data.gr_months_index_he[light_month]}:'
                      f' *{light_time:.5s}*\n'
                      f'‚ú® ◊î◊ë◊ì◊ú◊î {avdala_day}'
                      f' {data.gr_months_index_en[avdala_month]}:'
                      f' *{avdala_time:.5s}*'
            }
        lighting_time = responses.get(lang, '')
        return lighting_time

    # –ö–æ–≥–¥–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ –∏ –ø–µ—Ä–µ–¥ –Ω–∏–º —à–∞–±–±–∞—Ç
    @staticmethod
    def one_day_shabbat_before(
            lang: str,
            light_shab_day: str,
            light_shab_month: str,
            light_shab_time: str,
            light_day: str,
            light_month: str,
            light_time: str,
            avdala_day: str,
            avdala_month: str,
            avdala_time: str
    ) -> str:
        responses = {
            'Russian': f'–ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π (–®–∞–±–±–∞—Ç) {light_shab_day} '
                       f'{data.gr_months_index[light_shab_month]}: |'
                       f'{light_shab_time:.5s}\n'
                       f'–ê–≤–¥–∞–ª–∞ –∏ –∑–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π {light_day} '
                       f'{data.gr_months_index[light_month]}: |'
                       f'{light_time:.5s}\n'
                       f'–ê–≤–¥–∞–ª–∞ {avdala_day} '
                       f'{data.gr_months_index[avdala_month]}: |'
                       f'{avdala_time:.5s}',
            'English': f'Candle lighting (Shabbat) {light_shab_day} '
                       f'{data.gr_months_index_en[light_shab_month]}: |'
                       f'{light_shab_time:.5s}\n'
                       f'Avdala and candle lighting {light_day} '
                       f'{data.gr_months_index_en[light_month]}: |'
                       f'{light_time:.5s}\n'
                       f'Avdala {avdala_day} '
                       f'{data.gr_months_index_en[avdala_month]}: |'
                       f'{avdala_time:.5s}',
            'Hebrew': f'üïØ ◊î◊ì◊ú◊ß◊™ ◊†◊®◊ï◊™ ◊©◊ë◊™ {light_shab_day}'
                      f' {data.gr_months_index_he[light_shab_month]}:'
                      f' *{light_shab_time:.5s}*\n'
                      f'‚ú®üïØ ◊î◊ë◊ì◊ú◊î ◊ï◊î◊ì◊ú◊ß◊™ ◊†◊®◊ï◊™ {light_day}'
                      f' {data.gr_months_index_he[light_month]}:'
                      f' *{light_time:.5s}*\n'
                      f'‚ú® ◊î◊ë◊ì◊ú◊î {avdala_day}'
                      f' {data.gr_months_index_he[avdala_month]}:'
                      f' *{avdala_time:.5s}*'
        }
        lighting_time = responses.get(lang, '')
        return lighting_time

    # –î–ª—è –ô–æ–º-–ö–∏–ø—É—Ä–∞
    @staticmethod
    def fast_yom_kippur(
            lang: str,
            light_day: str,
            light_month: str,
            light_time: str,
            avdala_day: str,
            avdala_month: str,
            avdala_time: str
    ) -> str:
        responses = {
            'Russian': f'–ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π –∏?–Ω–∞—á–∞–ª–æ –ø–æ—Å—Ç–∞:%{light_day} '
                       f'{data.gr_months_index[light_month]} '
                       f'{light_time:.5s}\n'
                       f'–ê–≤–¥–∞–ª–∞ –∏ –∫–æ–Ω–µ—Ü –ø–æ—Å—Ç–∞:%{avdala_day} '
                       f'{data.gr_months_index[avdala_month]} '
                       f'{avdala_time:.5s}',
            'English': f'Candle lighting and?the fast begins:%{light_day} '
                       f'{data.gr_months_index_en[light_month]} '
                       f'{light_time:.5s} \n'
                       f'Avdala and the fast ends:%{avdala_day} '
                       f'{data.gr_months_index_en[avdala_month]} '
                       f'{avdala_time:.5s}',
            'Hebrew': f'üïØ ◊î◊ì◊ú◊ß◊™ ◊î◊†◊®◊ï◊™ ◊ï◊™◊ó◊ô◊ú◊™ ◊î◊¶◊ï◊ù {light_day}'
                      f' {data.gr_months_index_he[light_month]}:'
                      f' *{light_time:.5s}*\n'
                      f'‚ú® ◊î◊ë◊ì◊ú◊î ◊ï◊ô◊¶◊ô◊ê◊™ ◊î◊¶◊ï◊ù {avdala_day}'
                      f' {data.gr_months_index_he[avdala_month]}:'
                      f' *{avdala_time:.5s}*'
        }
        ra_time = responses.get(lang, '')
        return ra_time

    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    @staticmethod
    def single_fast(
            lang: str,
            day: str,
            month: str,
            time_begin: str,
            time_end: str,
            ben_ashmashot: str,
            nevareshet: str,
            shmirat_shabat: str
    ) -> str:
        responses = {
            'Russian': f'–ù–∞—á–∞–ª–æ –ø–æ—Å—Ç–∞:| {time_begin[:-3:]}\n'
                       f'%–í—ã—Ö–æ–¥ –∑–≤–µ–∑–¥:| {time_end[:-3:]}\n'
                       f'–°–µ—Ñ–µ—Ä –±–µ–Ω –ê—à–º–∞—à–æ—Ç:| {ben_ashmashot[:-3:]}\n'
                       f'–ù–µ–≤–∞—Ä–µ—à–µ—Ç:| {nevareshet[:-3:]}\n'
                       f'–®–º–∏—Ä–∞—Ç —à–∞–±–±–∞—Ç –∫–∏–ª—Ö–∞—Ç–∞:| {shmirat_shabat[:-3:]}',

            'English':  f'The fast begins:| {time_begin[:-3:]}\n'
                        f'%Tzeit akohavim:| {time_end[:-3:]}\n'
                        f'Sefer ben Ashmashot:| {ben_ashmashot[:-3:]}\n'
                        f'Nevareshet:| {nevareshet[:-3:]}\n'
                        f'Shmirat shabbat kelhata:| {shmirat_shabat[:-3:]}',
            'Hebrew': f'◊™◊ó◊ô◊ú◊™ ◊î◊¶◊ï◊ù {day} '
                      f'{data.gr_months_index_he[month]}:'
                      f' *{time_begin[:-3:]}*\n'
                      f'◊î◊¶◊ï◊ù ◊ô◊ï◊¶◊ê ◊ë-{day} {data.gr_months_index_he[month]}'
                      f'\n‚ú® ◊¶◊ê◊™ ◊î◊õ◊ï◊õ◊ë◊ô◊ù *{time_end[:-3:]}*\n'
                      f'üïñ ◊°◊§◊® ◊ë◊ô◊ü ◊î◊©◊û◊©◊ï◊™:'
                      f' *{ben_ashmashot[:-3:]}*\n'
                      f'üïò ◊†◊ë◊®◊©◊™: *{nevareshet[:-3:]}*\n'
                      f'üïë ◊©◊û◊ô◊®◊™ ◊©◊ë◊™ ◊õ◊î◊ú◊õ◊™◊î:'
                      f' *{shmirat_shabat[:-3:]}*'
        }
        holiday_number = responses.get(lang, '')
        return holiday_number

    # –ö–æ–≥–¥–∞ 2 –¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ –∏ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö —à–∞–±–±–∞—Ç
    @staticmethod
    def lighting_shabbat(
            lang: str,
            light_day: str,
            light_month: str,
            light_time: str,
            light_shab_day: str,
            light_shab_month: str,
            light_shab_time: str,
            avdala_day: str,
            avdala_month: str,
            avdala_time: str
    ) -> str:
        responses = {
            'Russian': f'–ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π {light_day} '
                       f'{data.gr_months_index[light_month]}: |'
                       f'{light_time:.5s}\n'
                       f'–ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π (–®–∞–±–±–∞—Ç) {light_shab_day} '
                       f'{data.gr_months_index[light_shab_month]}: |'
                       f'{light_shab_time:.5s}\n'
                       f'–ê–≤–¥–∞–ª–∞ {avdala_day} '
                       f'{data.gr_months_index[avdala_month]}: |'
                       f'{avdala_time:.5s}',
            'English': f'Candle lighting {light_day} '
                       f'{data.gr_months_index_en[light_month]}: |'
                       f'{light_time:.5s}\n'
                       f'Candle lighting (Shabbat) {light_shab_day} '
                       f'{data.gr_months_index_en[light_shab_month]}: |'
                       f'{light_shab_time:.5s}\n'
                       f'Avdala {avdala_day} '
                       f'{data.gr_months_index_en[avdala_month]}: |'
                       f'{avdala_time:.5s}',
            'Hevrew': f'üïØ ◊î◊ì◊ú◊ß◊™ ◊†◊®◊ï◊™ {light_day}'
                      f' {data.gr_months_index_he[light_month]}:'
                      f' *{light_time:.5s}*\n'
                      f'{light_shab_day} ◊î◊ì◊ú◊ß◊™ ◊†◊®◊ï◊™ ◊©◊ë◊™ üïØ'
                      f'{data.gr_months_index_he[light_shab_month]}:'
                      f'*{light_shab_time:.5s}*\n'
                      f'‚ú® ◊î◊ë◊ì◊ú◊î {avdala_day}'
                      f' {data.gr_months_index_he[avdala_month]}:'
                      f' *{avdala_time:.5s}*'
        }
        ra_time = responses.get(lang, '')
        return ra_time

    # –ö–æ–≥–¥–∞ 2 –¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ –∏ –ø–µ—Ä–µ–¥ –Ω–∏–º–∏ —à–∞–±–±–∞—Ç
    @staticmethod
    def shabbat_before_holiday_diaspora(
            lang: str,
            light_shab_day: str,
            light_shab_month: str,
            light_shab_time: str,
            light_1_day: str,
            light_1_month: str,
            light_1_time: str,
            light_2_day: str,
            light_2_month: str,
            light_2_time: str,
            avdala_day: str,
            avdala_month: str,
            avdala_time: str
    ) -> str:
        responses = {
            'Russian': f'–ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π (–®–∞–±–±–∞—Ç) {light_shab_day} '
                       f'{data.gr_months_index[light_shab_month]}: |'
                       f'{light_shab_time:.5s}\n'
                       f'–ê–≤–¥–∞–ª–∞ –∏ –∑–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π {light_1_day} '
                       f'{data.gr_months_index[light_1_month]}: |'
                       f'{light_1_time:.5s}\n'
                       f'–ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π {light_2_day} '
                       f'{data.gr_months_index[light_2_month]}: |'
                       f'{light_2_time:.5s}\n'
                       f'–ê–≤–¥–∞–ª–∞ {avdala_day} '
                       f'{data.gr_months_index[avdala_month]}: |'
                       f'{avdala_time:.5s}',
            'English': f'Candle lighting (Shabbat) {light_shab_day} '
                       f'{data.gr_months_index_en[light_shab_month]}: |'
                       f'{light_shab_time:.5s}\n'
                       f'Avdala and candle lighting {light_1_day} '
                       f'{data.gr_months_index_en[light_1_month]}: |'
                       f'{light_1_time:.5s}\n'
                       f'Candle lighting {light_2_day} '
                       f'{data.gr_months_index_en[light_2_month]}: |'
                       f'{light_2_time:.5s}\n'
                       f'Avdala {avdala_day} '
                       f'{data.gr_months_index_en[avdala_month]}: |'
                       f'{avdala_time:.5s}',
            'Hebrew': f'üïØ ◊î◊ì◊ú◊ß◊™ ◊†◊®◊ï◊™ ◊©◊ë◊™ {light_shab_day}'
                      f' {data.gr_months_index_he[light_shab_month]}:'
                      f' *{light_shab_time:.5s}*\n'
                      f'‚ú®üïØ ◊î◊ë◊ì◊ú◊î ◊ï◊î◊ì◊ú◊ß◊™ ◊†◊®◊ï◊™ {light_1_day}'
                      f' {data.gr_months_index_he[light_1_month]}:'
                      f' *{light_1_time:.5s}*\n'
                      f'üïØ ◊î◊ì◊ú◊ß◊™ ◊†◊®◊ï◊™ {light_2_day}'
                      f' {data.gr_months_index_he[light_2_month]}: '
                      f'*{light_2_time:.5s}*\n'
                      f'‚ú® ◊î◊ë◊ì◊ú◊î {avdala_day}'
                      f' {data.gr_months_index_he[avdala_month]}:'
                      f' *{avdala_time:.5s}*'
        }
        ra_time = responses.get(lang, '')
        return ra_time

    # 2 –¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ (–±–µ–∑ —à–∞–±–±–∞—Ç–∞)
    @staticmethod
    def lighting_double(
            lang: str,
            light_1_day: str,
            light_1_month: str,
            light_1_time: str,
            light_2_day: str,
            light_2_month: str,
            light_2_time: str,
            avdala_day: str,
            avdala_month: str,
            avdala_time: str
    ) -> str:
        responses = {
            'Russian': f'–ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π {light_1_day} '
                       f'{data.gr_months_index[light_1_month]}: |'
                       f'{light_1_time:.5s}\n'
                       f'–ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π {light_2_day} '
                       f'{data.gr_months_index[light_2_month]}: |'
                       f'{light_2_time:.5s}\n'
                       f'–ê–≤–¥–∞–ª–∞ {avdala_day} '
                       f'{data.gr_months_index[avdala_month]}: |'
                       f'{avdala_time:.5s}',
            'English': f'Candle lighting {light_1_day} '
                       f'{data.gr_months_index_en[light_1_month]}: |'
                       f'{light_1_time:.5s}\n'
                       f'Candle lighting {light_2_day} '
                       f'{data.gr_months_index_en[light_2_month]}: |'
                       f'{light_2_time:.5s}\n'
                       f'Avdala {avdala_day} '
                       f'{data.gr_months_index_en[avdala_month]}: |'
                       f'{avdala_time:.5s}',
            'Hebrew': f'üïØ ◊î◊ì◊ú◊ß◊™ ◊†◊®◊ï◊™ {light_1_day}'
                      f' {data.gr_months_index_he[light_1_month]}:'
                      f' *{light_1_time:.5s}*\n'
                      f'üïØ ◊î◊ì◊ú◊ß◊™ ◊†◊®◊ï◊™ {light_2_day}'
                      f' {data.gr_months_index_he[light_2_month]}:'
                      f' *{light_2_time:.5s}*\n'
                      f'‚ú® ◊î◊ë◊ì◊ú◊î {avdala_day}'
                      f' {data.gr_months_index_he[avdala_month]}:'
                      f' *{avdala_time:.5s}*'
        }
        ra_time = responses.get(lang, '')
        return ra_time

    # 2 –¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ (—Å —à–∞–±–±–∞—Ç–æ–º)
    @staticmethod
    def shabbat_include(
            lang: str,
            light_1_day: str,
            light_1_month: str,
            light_1_time: str,
            light_2_day: str,
            light_2_month: str,
            light_2_time: str,
            avdala_day: str,
            avdala_month: str,
            avdala_time: str
    ) -> str:
        responses = {
            'Russian': f'–ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π (–®–∞–±–±–∞—Ç) {light_1_day} '
                       f'{data.gr_months_index[light_1_month]}: |'
                       f'{light_1_time:.5s}\n'
                       f'–ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π {light_2_day} '
                       f'{data.gr_months_index[light_2_month]}: |'
                       f'{light_2_time:.5s}\n'
                       f'–ê–≤–¥–∞–ª–∞ {avdala_day} '
                       f'{data.gr_months_index[avdala_month]}: |'
                       f'{avdala_time:.5s}',
            'English': f'Candle lighting (Shabbat) {light_1_day} '
                       f'{data.gr_months_index_en[light_1_month]}: |'
                       f'{light_1_time:.5s}\n'
                       f'Candle lighting {light_2_day} '
                       f'{data.gr_months_index_en[light_2_month]}: |'
                       f'{light_2_time:.5s}\n'
                       f'Avdala {avdala_day} '
                       f'{data.gr_months_index_en[avdala_month]}: |'
                       f'{avdala_time:.5s}',
            'Hebrew': f'üïØ ◊î◊ì◊ú◊ß◊™ ◊†◊®◊ï◊™ {light_1_day} '
                      f' {data.gr_months_index_he[light_1_month]}:'
                      f' *{light_1_time:.5s}*\n'
                      f'üïØ ◊î◊ì◊ú◊ß◊™ ◊†◊®◊ï◊™ {light_2_day}'
                      f' {data.gr_months_index_he[light_2_month]}:'
                      f' *{light_2_time:.5s}*\n'
                      f'‚ú® ◊î◊ë◊ì◊ú◊î {avdala_day}'
                      f' {data.gr_months_index_he[avdala_month]}:'
                      f' *{avdala_time:.5s}*'
        }
        ra_time = responses.get(lang, '')
        return ra_time

    # 2 –¥–Ω—è –ø—Ä–∞–¥–Ω–∏–∫–∞ –∏ –ø–æ—Å–ª–µ –Ω–∏—Ö –∏–¥–µ—Ç —à–∞–±–±–∞—Ç
    @staticmethod
    def lighting_double_shabbat(
            lang: str,
            light_1_day: str,
            light_1_month: str,
            light_1_time: str,
            light_2_day: str,
            light_2_month: str,
            light_2_time: str,
            light_shab_day: str,
            light_shab_month: str,
            light_shab_time: str,
            avdala_day: str,
            avdala_month: str,
            avdala_time: str
    ) -> str:
        responses = {
            'Russian': f'üïØ –ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π {light_1_day}'
                       f' {data.gr_months_index[light_1_month]}:'
                       f' *{light_1_time:.5s}*\n'
                       f'üïØ –ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π {light_2_day}'
                       f' {data.gr_months_index[light_2_month]}:'
                       f' *{light_2_time:.5s}*\n'
                       f'üïØ –ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π (–®–∞–±–±–∞—Ç) {light_shab_day}'
                       f' {data.gr_months_index[light_shab_month]}:'
                       f' *{light_shab_time:.5s}*\n'
                       f'‚ú® –ê–≤–¥–∞–ª–∞ {avdala_day}'
                       f' {data.gr_months_index[avdala_month]}:'
                       f' *{avdala_time:.5s}*',
            'English': f'üïØ Candle lighting {light_1_day}'
                       f' {data.gr_months_index_en[light_1_month]}:'
                       f' *{light_1_time:.5s}*\n'
                       f'üïØ Candle lighting {light_2_day}'
                       f' {data.gr_months_index_en[light_2_month]}:'
                       f' *{light_2_time:.5s}*\n'
                       f'üïØ Candle lighting (Shabbat) {light_shab_day}'
                       f' {data.gr_months_index_en[light_shab_month]}: '
                       f'*{light_shab_time:.5s}*\n'
                       f'‚ú® Avdala {avdala_day}'
                       f' {data.gr_months_index_en[avdala_month]}:'
                       f' *{avdala_time:.5s}*',
            'Hebrew': f'üïØ ◊î◊ì◊ú◊ß◊™ ◊†◊®◊ï◊™ {light_1_day} '
                      f' {data.gr_months_index_he[light_1_month]}:'
                      f' *{light_1_time:.5s}*\n'
                      f'üïØ ◊î◊ì◊ú◊ß◊™ ◊†◊®◊ï◊™ {light_2_day}'
                      f' {data.gr_months_index_he[light_2_month]}:'
                      f' *{light_2_time:.5s}*\n'
                      f'üïØ ◊î◊ì◊ú◊ß◊™ ◊†◊®◊ï◊™ ◊©◊ë◊™ {light_shab_day}'
                      f' {data.gr_months_index_he[light_shab_month]}: '
                      f'*{light_shab_time:.5s}*\n'
                      f'‚ú® ◊î◊ë◊ì◊ú◊î {avdala_day}'
                      f' {data.gr_months_index_he[avdala_month]}:'
                      f' *{avdala_time:.5s}*'
        }
        ra_time = responses.get(lang, '')
        return ra_time

    # –î–ª–∏–Ω–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ (–ü–µ–π—Å–∞—Ö, –•–∞–Ω—É–∫–∞; –°—É–∫–∫–æ—Ç –Ω–µ –≤—Ö–æ–¥–∏—Ç),
    # –¥–∞—Ç—ã –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–∞ 1 –≥—Ä–∏–≥–æ—Ä–∏–∞–Ω—Å–∫–∏–π –º–µ—Å—è—Ü
    @staticmethod
    def long_holiday_one_month(
            lang: str,
            day_start: str,
            day_end: str,
            month: str,
            year: int,
            weekday_start: str,
            weekday_end: str
    ) -> str:
        responses = {
            'Russian': f'–î–∞—Ç–∞: |{day_start}-{day_end} '
                       f'{data.gr_months_index[month]} {year},^'
                       f'{data.hdays_of_7[weekday_start]}-'
                       f'{data.hdays_of_7[weekday_end]}',
            'English': f'Date: |{day_start}-{day_end} '
                       f'{data.gr_months_index_en[month]} {year},^'
                       f'{data.hdays_of_7_en[weekday_start]}-'
                       f'{data.hdays_of_7_en[weekday_end]}',
            'Hebrew': f'üìÖ ◊™◊ê◊®◊ô◊ö:'
                      f' {day_start}-{day_end}'
                      f' {data.gr_months_index_he[month]}'
                      f' {year}, '
                      f'{data.hdays_of_7_he[weekday_start]} - '
                      f'{data.hdays_of_7_he[weekday_end]}'
        }
        holiday_number = responses.get(lang, '')
        return holiday_number

    # –î–≤—É—Ö–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏, –¥–∞—Ç—ã –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–∞ 1 –≥—Ä–∏–≥–æ—Ä–∏–∞–Ω—Å–∫–∏–π –º–µ—Å—è—Ü
    @staticmethod
    def two_days_holiday_one_month(
            lang: str,
            day_start: str,
            day_end: str,
            month: str,
            year: int,
            weekday_start: str,
            weekday_end: str
    ) -> str:
        responses = {
            'Russian': f'–î–∞—Ç–∞: |{day_start} –∏ {day_end} '
                       f'{data.gr_months_index[month]} {year},^'
                       f'{data.hdays_of_7[weekday_start]}-'
                       f'{data.hdays_of_7[weekday_end]}',
            'English': f'Date: |{day_start} and {day_end} '
                       f'{data.gr_months_index_en[month]} {year},^'
                       f'{data.hdays_of_7_en[weekday_start]}-'
                       f'{data.hdays_of_7_en[weekday_end]}',
            'Hebrew': f'üìÖ ◊™◊ê◊®◊ô◊ö: '
                      f'{day_start} ◊ï-' 
                      f'{day_end}'
                      f' {data.gr_months_index_he[month]}'
                      f' {year}, '
                      f'{data.hdays_of_7_he[weekday_start]} - '
                      f'{data.hdays_of_7_he[weekday_end]}'
        }
        holiday_number = responses.get(lang, '')
        return holiday_number

    # –î–ª–∏–Ω–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏, –¥–∞—Ç—ã –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–∞ 2 –≥—Ä–∏–≥–æ—Ä–∏–∞–Ω—Å–∫–∏—Ö –º–µ—Å—è—Ü–∞
    @staticmethod
    def long_holiday_two_months(
            lang: str,
            day_start: str,
            month_start: str,
            day_end: str,
            month_end: str,
            year: int,
            weekday_start: str,
            weekday_end: str
    ) -> str:
        responses = {
            'Russian': f'–î–∞—Ç–∞: {day_start}'
                       f' {data.gr_months_index[month_start]} - '
                       f'{day_end}'
                       f' {data.gr_months_index[month_end]}'
                       f' {year},'
                       f' {data.hdays_of_7[weekday_start]}-'
                       f'{data.hdays_of_7[weekday_end]}',
            'English': f'Date: {day_start}'
                       f' {data.gr_months_index_en[month_start]} - '
                       f'{day_end}'
                       f' {data.gr_months_index_en[month_end]}'
                       f' {year}, '
                       f'{data.hdays_of_7_en[weekday_start]}-'
                       f'{data.hdays_of_7_en[weekday_end]}',
            'Hebrew': f'üìÖ ◊™◊ê◊®◊ô◊ö: '
                      f'{day_start} {data.gr_months_index_he[month_start]} - '
                      f'{day_end}'
                      f' {data.gr_months_index_he[month_end]}'
                      f' {year}, '
                      f'{data.hdays_of_7_he[weekday_start]} - '
                      f'{data.hdays_of_7_he[weekday_end]}'
        }
        holiday_number = responses.get(lang, '')
        return holiday_number

    @staticmethod
    def long_holiday_two_months_two_years(
            lang: str,
            day_start: str,
            month_start: str,
            year_start: int,
            day_end: str,
            month_end: str,
            year_end: int,
            weekday_start: str,
            weekday_end: str
    ) -> str:
        responses = {
            'Russian': f'–î–∞—Ç–∞: |{day_start} '
                       f'{data.gr_months_index[month_start]} '
                       f'{year_start} -^{day_end} '
                       f'{data.gr_months_index[month_end]} {year_end},^'
                       f'{data.hdays_of_7[weekday_start]}-'
                       f'{data.hdays_of_7[weekday_end]}',
            'English': f'Date: |{day_start} '
                       f'{data.gr_months_index_en[month_start]} '
                       f'{year_start} -^{day_end} '
                       f'{data.gr_months_index_en[month_end]} {year_end},^'
                       f'{data.hdays_of_7_en[weekday_start]}-'
                       f'{data.hdays_of_7_en[weekday_end]}',
            'Hebrew': f'üìÖ ◊™◊ê◊®◊ô◊ö: '
                      f'{day_start} {data.gr_months_index_he[month_start]} '
                      f'{year_start} - '
                      f'{day_end}'
                      f' {data.gr_months_index_he[month_end]}'
                      f' {year_end}, '
                      f'{data.hdays_of_7_he[weekday_start]} - '
                      f'{data.hdays_of_7_he[weekday_end]}'
        }
        holiday_number = responses.get(lang, '')
        return holiday_number

    # –î–≤—É—Ö–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏, –¥–∞—Ç—ã –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–∞ 2 –≥—Ä–∏–≥–æ—Ä–∏–∞–Ω—Å–∫–∏—Ö –º–µ—Å—è—Ü–∞
    @staticmethod
    def two_days_holiday_two_months(
            lang: str,
            day_start: str,
            month_start: str,
            day_end: str,
            month_end: str,
            year: int,
            weekday_start: str,
            weekday_end: str
    ) -> str:
        responses = {
            'Russian': f'–î–∞—Ç–∞: |{day_start} '
                       f'{data.gr_months_index[month_start]} –∏ {day_end} '
                       f'{data.gr_months_index[month_end]} {year},^'
                       f'{data.hdays_of_7[weekday_start]}-'
                       f'{data.hdays_of_7[weekday_end]}',
            'English': f'Date: |{day_start} '
                       f'{data.gr_months_index_en[month_start]} and {day_end} '
                       f'{data.gr_months_index_en[month_end]} {year},^'
                       f'{data.hdays_of_7_en[weekday_start]}-'
                       f'{data.hdays_of_7_en[weekday_end]}',
            'Hebrew': f'üìÖ ◊™◊ê◊®◊ô◊ö:'
                      f' {day_start} {data.gr_months_index_he[month_start]} ◊ï-'
                      f'{day_end}'
                      f' {data.gr_months_index_he[month_end]}'
                      f' {year}, '
                      f'{data.hdays_of_7_he[weekday_start]}-'
                      f'{data.hdays_of_7_he[weekday_end]}'
        }
        holiday_number = responses.get(lang, '')
        return holiday_number

    # –û–¥–Ω–æ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
    @staticmethod
    def one_day_holiday(
            lang: str,
            first_day: str,
            month: str,
            year: int,
            weekday: str
    ) -> str:
        responses = {
            'Russian': f'–î–∞—Ç–∞: |{first_day} '
                       f'{data.gr_months_index[month]} '
                       f'{year},^{data.hdays_of_7[weekday]}',
            'English': f'Date: |{first_day} '
                       f'{data.gr_months_index_en[month]} '
                       f'{year},^{data.hdays_of_7_en[weekday]}',
            'Hebrew': f'üìÖ ◊™◊ê◊®◊ô◊ö: '
                      f'{first_day} {data.gr_months_index_he[month]}'
                      f' {year},'
                      f' {data.hdays_of_7_he[weekday]}'
        }
        holiday_number = responses.get(lang, '')
        return holiday_number

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–±–æ—Ä —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –û—à–∞–Ω–∞ –†–∞–±–∞
    @staticmethod
    def one_day_holiday_hoshana_rabba(
            lang: str,
            first_day: str,
            month: str,
            year: int,
            weekday: str
    ) -> str:
        responses = {
            'Russian': f'{first_day} {data.gr_months_index[month]} {year},^'
                       f'{data.hdays_of_7[weekday]}',
            'English': f'{first_day} {data.gr_months_index_en[month]} {year},^'
                       f'{data.hdays_of_7_en[weekday]}',
            'Hebrew': f'{first_day} {data.gr_months_index_he[month]}'
                      f' {year},'
                      f' {data.hdays_of_7_he[weekday]}'
        }
        holiday_number = responses.get(lang, '')
        return holiday_number

    # –î–ª—è –ø–æ—Å—Ç–∞ 9 –∞–≤–∞
    @staticmethod
    def tisha_av_fast(
            lang: str,
            day_begin: str,
            month_begin: str,
            time_begin: str,
            chatzot: str,
            day_end: str,
            month_end: str,
            time_end: str,
            ben_ashmashot: str,
            nevareshet: str,
            shmirat_shabat: str
    ) -> str:
        responses = {
            'Russian': f'–ù–∞—á–∞–ª–æ –ø–æ—Å—Ç–∞:| {time_begin[:-3:]}\n'
                       f'$–•–∞—Ü–æ—Ç:| {chatzot[:-3:]}\n'
                       f'$–í—ã—Ö–æ–¥ –∑–≤–µ–∑–¥:| {time_end[:-3:]}\n'
                       f'–°–µ—Ñ–µ—Ä –±–µ–Ω –ê—à–º–∞—à–æ—Ç:| {ben_ashmashot[:-3:]}\n'
                       f'–ù–µ–≤–∞—Ä–µ—à–µ—Ç:| {nevareshet[:-3:]}\n'
                       f'–®–º–∏—Ä–∞—Ç —à–∞–±–±–∞—Ç –∫–∏–ª—Ö–∞—Ç–∞:| {shmirat_shabat[:-3:]}',
            'English': f'Fast begins:| {time_begin[:-3:]}\n'
                       f'$Chatzot:| {chatzot[:-3:]}\n'
                       f'$Tzeit akohavim:| {time_end[:-3:]}\n'
                       f'Sefer ben Ashmashot:| {ben_ashmashot[:-3:]}\n'
                       f'Nevareshet:| {nevareshet[:-3:]}\n'
                       f'Shmirat shabbat kelhata:| {shmirat_shabat[:-3:]}',
        'Hebrew': f'{day_begin} ◊™◊ó◊ô◊ú◊™ ◊î◊¶◊ï◊ù'
                  f' {data.gr_months_index_en[month_begin]}:'
                       f' *{time_begin[:-3:]}*:◊ó◊¶◊ï◊™\n*{chatzot[:-3:]}*\n'
                       f'◊ô◊¶◊ô◊ê◊™ ◊î◊¶◊ï◊ù {day_end}'
                       f' {data.gr_months_index_en[month_end]}\n'
                       f' :◊¶◊ê◊™ ◊î◊õ◊ï◊õ◊ë◊ô◊ù ‚ú®'
                       f' *{time_end[:-3:]}*\n'
                       f'\n*{ben_ashmashot[:-3:]}* :◊°◊§◊® ◊ë◊ô◊ü ◊î◊©◊û◊©◊ï◊™ üïñ'
                       f'\n*{nevareshet[:-3:]}* :◊†◊ë◊®◊©◊™ üïò'
                       f'*{shmirat_shabat[:-3:]}* :◊©◊û◊ô◊®◊™ ◊©◊ë◊™ ◊õ◊î◊ú◊õ◊™◊î üïë'
        }
        holiday_number = responses.get(lang, '')
        return holiday_number


# –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–Ø –î–õ–Ø –ö–û–ù–í–ï–†–¢–ï–†–ê
class Converter(object):

    @staticmethod
    def welcome_to_converter(lang: str) -> str:
        responses = {
            'Russian': '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—ã –∏–∑ '
                       '–≥—Ä–∏–≥–æ—Ä–∏–∞–Ω—Å–∫–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ –µ–≤—Ä–µ–π—Å–∫–∏–π –∏ –æ–±—Ä–∞—Ç–Ω–æ, –∞ '
                       '—Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç—å –∑–º–∞–Ω–∏–º –Ω–∞ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É.\n'
                       '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º –≤–∞—Ä–∏–∞–Ω—Ç:',
            'English': 'Here you can convert dates from gregorian to hebrew '
                       'calendar and vice versa, and get zmanim to the '
                       'converted date.\n'
                       'Choose the option:',
            'Hebrew': f''  # TODO –ø–µ—Ä–µ–≤–æ–¥
        }
        response = responses.get(lang, '')
        return response

    # –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –¥–ª—è –≥—Ä–∏–≥ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
    @staticmethod
    def request_date_for_converter_greg(lang: str) -> str:
        responses = {
            'Russian': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≥—Ä–µ–≥–æ—Ä–∏–∞–Ω—Å–∫–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è, '
                       '–∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å '
                       '*–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì*',
            'English': 'Please enter the gregorian date to convert '
                       'for your selection *in the format DD.MM.YYYY*',
            'Hebrew': ''  # TODO –ø–µ—Ä–µ–≤–æ–¥
        }
        response = responses.get(lang, '')
        return response

    # –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –¥–ª—è –µ–≤—Ä –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
    @staticmethod
    def request_date_for_converter_heb(lang: str) -> str:
        responses = {
            'Russian': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –µ–≤—Ä–µ–π—Å–∫–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è, '
                       '–∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å '
                       '*–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î –º–µ—Å—è—Ü –ì–ì–ì–ì* (–Ω–∞–ø—Ä–∏–º–µ—Ä: `4 –∏—è—Ä 5778)`\n\n'
                       '_–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è '
                       '–µ–≤—Ä–µ–π—Å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤!_\n–Ω–∏—Å–∞–Ω, –∏—è—Ä, —Å–∏–≤–∞–Ω, —Ç–∞–º—É–∑, –∞–≤, '
                       '—ç–ª—É–ª—å, —Ç–∏—à—Ä–µ–π, —Ö–µ—à–≤–∞–Ω, –∫–∏—Å–ª–µ–≤, —Ç–µ–≤–µ—Ç, —à–≤–∞—Ç, –∞–¥–∞—Ä, '
                       '–∞–¥–∞—Ä 1, –∞–¥–∞—Ä 2',
            'English': 'Please enter the hebrew date to convert '
                       'for your selection *in the format DD month YYYY* '
                       '(For example: `4 iyar 5778`)\n\n'
                       '_Pay attention to the correct names of hebrew '
                       'months!_\nnisan, iyar, sivan, tamuz, av, elul, '
                       'tishrei, cheshvan, kislev, tevet, shevat, adar, adar 1'
                       ', adar 2',
            'Hebrew': ''  # TODO –ø–µ—Ä–µ–≤–æ–¥
        }
        response = responses.get(lang, '')
        return response

    # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–µ–≥–æ—Ä–∏–∞–Ω—Å–∫–æ–π –¥–∞—Ç—ã
    @staticmethod
    def convert_greg_to_heb(
            greg_date: tuple,
            day_of_week: int,
            heb_date: tuple,
            lang: str
    ) -> str:
        responses = {
            'Russian': f'–ì—Ä–µ–≥–æ—Ä–∏–∞–Ω—Å–∫–∞—è –¥–∞—Ç–∞: *{greg_date[2]} '
                       f'{data.gr_months_index[greg_date[1]]} '
                       f'{greg_date[0]}*, {data.days_ru[day_of_week]}\n'
                       f'–ï–≤—Ä–µ–π—Å–∫–∞—è –¥–∞—Ç–∞: *{heb_date[2]} '
                       f'{data.jewish_months_a[heb_date[1]]} {heb_date[0]}*',
            'English': f'Gregorian date: *{greg_date[2]} '
                       f'{data.gr_months_index_en[greg_date[1]]} '
                       f'{greg_date[0]}*, {data.days_en[day_of_week]}\n'
                       f'Hebrew date: *{heb_date[2]} '
                       f'{heb_date[1]} {heb_date[0]}*',
            'Hebrew': f''  # TODO –ø–µ—Ä–µ–≤–æ–¥
        }
        response = responses.get(lang, '')
        return response

    # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–≤—Ä–µ–π—Å–∫–æ–π –¥–∞—Ç—ã
    @staticmethod
    def convert_heb_to_greg(
            heb_date: tuple,
            day_of_week: int,
            greg_date: tuple,
            lang: str,
    ) -> str:
        responses = {
            'Russian': f'–ï–≤—Ä–µ–π—Å–∫–∞—è –¥–∞—Ç–∞: *{heb_date[2]} '
                       f'{data.heb_months_codes_ru[heb_date[1]]} '
                       f'{heb_date[0]}*\n–ì—Ä–µ–≥–æ—Ä–∏–∞–Ω—Å–∫–∞—è –¥–∞—Ç–∞: *{greg_date[2]} '
                       f'{data.gr_months_index[greg_date[1]]} '
                       f'{greg_date[0]}*, {data.days_ru[day_of_week]}',
            'English': f'Hebrew date: *{heb_date[2]} '
                       f'{data.heb_months_codes_en[heb_date[1]]} '
                       f'{heb_date[0]}*\nGregorian date: *{greg_date[2]} '
                       f'{data.gr_months_index_en[greg_date[1]]} '
                       f'{greg_date[0]}*, {data.days_en[day_of_week]}',
            'Hebrew': f''  # TODO –ø–µ—Ä–µ–≤–æ–¥
        }
        response = responses.get(lang, '')
        return response

    @staticmethod
    def convert_heb_to_greg_two(
            heb_date: tuple,
            day_of_week_1: int,
            day_of_week_2: int,
            greg_date_1: tuple,
            greg_date_2: tuple,
            lang: str,
    ) -> str:
        responses = {
            'Russian': f'–ï–≤—Ä–µ–π—Å–∫–∞—è –¥–∞—Ç–∞: *{heb_date[2]} '
                       f'{data.heb_months_codes_ru[heb_date[1]]} '
                       f'{heb_date[0]}*\n\n'
                       f'–ù–∞ –≤—Å—è–∫–∏–π –º—ã —Ç—É—Ç –≤—ã–≤–µ–¥–µ–º –≤–∞–º –µ—â—ë –¥–ª—è –∞–¥–∞—Ä–∞ 2\n\n'
                       f'–ì—Ä–µ–≥–æ—Ä–∏–∞–Ω—Å–∫–∞—è –¥–∞—Ç–∞ (–∞–¥–∞—Ä 1): *{greg_date_1[2]} '
                       f'{data.gr_months_index[greg_date_1[1]]} '
                       f'{greg_date_1[0]}*, {data.days_ru[day_of_week_1]}\n'
                       f'–ì—Ä–µ–≥–æ—Ä–∏–∞–Ω—Å–∫–∞—è –¥–∞—Ç–∞ (–∞–¥–∞—Ä 2): *{greg_date_2[2]} '
                       f'{data.gr_months_index[greg_date_2[1]]} '
                       f'{greg_date_2[0]}*, {data.days_ru[day_of_week_2]}',
            'English': f'Hebrew date: *{heb_date[2]} '
                       f'{data.heb_months_codes_en[heb_date[1]]} '
                       f'{heb_date[0]}*\n\n'
                       f'We think you are dumb and give you additional info\n\n'
                       f'Gregorian date (adar 1): *{greg_date_1[2]} '
                       f'{data.gr_months_index_en[greg_date_1[1]]} '
                       f'{greg_date_1[0]}*, {data.days_en[day_of_week_1]}\n'
                       f'Gregorian date (adar 2): *{greg_date_2[2]} '
                       f'{data.gr_months_index_en[greg_date_2[1]]} '
                       f'{greg_date_2[0]}*, {data.days_en[day_of_week_2]}'
            ,
            'Hebrew': f''  # TODO –ø–µ—Ä–µ–≤–æ–¥
        }
        response = responses.get(lang, '')
        return response

    # –≤—ã–¥–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
    @staticmethod
    def get_month_name(lang: str, name: str) -> str:
        responses = {
            'Russian': data.heb_months_names_ru,
            'English': data.heb_months_names_en,
            'Hebrew': data.heb_months_names_he
        }
        response = responses.get(lang)[name]
        return response

    # –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞
    @staticmethod
    def incorrect_heb_date_format(lang: str) -> str:
        responses = {
            'Russian': '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '
                       '–¥–∞—Ç—É –≤ *—Ñ–æ—Ä–º–∞—Ç–µ –î–î –º–µ—Å—è—Ü –ì–ì–ì–ì*\n\n'
                       '_–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è '
                       '–µ–≤—Ä–µ–π—Å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤!_\n–Ω–∏—Å–∞–Ω, –∏—è—Ä, —Å–∏–≤–∞–Ω, —Ç–∞–º–º—É–∑, –∞–≤, '
                       '—ç–ª—É–ª—å, —Ç–∏—à—Ä–µ–π, —Ö–µ—à–≤–∞–Ω, –∫–∏—Å–ª–µ–≤, —Ç–µ–≤–µ—Ç, —à–≤–∞—Ç, –∞–¥–∞—Ä, '
                       '–∞–¥–∞—Ä 1, –∞–¥–∞—Ä 2',
            'English': 'Incorrect date. \nPlease input date *in '
                       'the format DD month YYYY*_pay attention to the '
                       'correct names of hebrew months!_\nnisan, iyar, sivan, '
                       'tammuz, av, elul, tishrei, cheshvan, kislev, tevet, '
                       'shevat, adar, adar 1, adar 2',
            'Hebrew': ''  # TODO –ø–µ—Ä–µ–≤–æ–¥
        }
        response = responses.get(lang, '')
        return response

    # —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –¥–∞—Ç–µ
    @staticmethod
    def incorrect_heb_date_value(lang: str) -> str:
        responses = {
            'Russian': '–í–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '
                       '–¥–∞—Ç—É –≤ *—Ñ–æ—Ä–º–∞—Ç–µ –î–î –º–µ—Å—è—Ü –ì–ì–ì–ì*\n\n'
                       '_–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è '
                       '–µ–≤—Ä–µ–π—Å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤!_\n–Ω–∏—Å–∞–Ω, –∏—è—Ä, —Å–∏–≤–∞–Ω, —Ç–∞–º–º—É–∑, –∞–≤, '
                       '—ç–ª—É–ª—å, —Ç–∏—à—Ä–µ–π, —Ö–µ—à–≤–∞–Ω, –∫–∏—Å–ª–µ–≤, —Ç–µ–≤–µ—Ç, —à–≤–∞—Ç, –∞–¥–∞—Ä, '
                       '–∞–¥–∞—Ä 1, –∞–¥–∞—Ä 2',
            'English': 'The date that you entered doesn\'t exist. \n'
                       'Please input date *in the format DD month YYYY*\n'
                       '_pay attention to the correct names of hebrew '
                       'months!_\nnisan, iyar, sivan, tammuz, av, elul, '
                       'tishrei, cheshvan, kislev, tevet, shevat, adar, '
                       'adar 1, adar 2',
            'Hebrew': ''  # TODO –ø–µ—Ä–µ–≤–æ–¥
        }
        response = responses.get(lang, '')
        return response
