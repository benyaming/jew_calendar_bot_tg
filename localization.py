# -*- coding: utf-8 -*-
import data


# –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–Ø –î–õ–Ø –î–ê–§ –ô–û–ú–ò
class DafYomi(object):

    @staticmethod
    def get_str(lang: str, masechta: str, daf: str) -> str:
        daf_str = ''
        if lang == 'Russian':
            daf_str = f'*–î–∞—Ñ –ô–æ–º–∏*\n\nüìó *–¢—Ä–∞–∫—Ç–∞—Ç:* {data.talmud[masechta]} ' \
                      f'\nüìÑ *–õ–∏—Å—Ç:* {daf}'
        elif lang == 'English':
            daf_str = f'*Daf Yomi*\n\nüìó *Masechta:* {masechta}\n ' \
                      f'üìÑ *Daf:* {daf}'
        return daf_str


# –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–Ø –î–õ–Ø –†–û–® –•–û–î–ï–®–ê
class RoshHodesh(object):

    # –µ—Å–ª–∏ –¥–≤–∞ –¥–Ω—è –†–• –≤ —Ä–∞–∑–Ω—ã—Ö –≥–æ–¥–∞—Ö
    @staticmethod
    def two_days_in_different_years(
            lang: str,
            first_year: int,
            second_year: int
    ) -> str:
        rh_days = ''
        if lang == 'Russian':
            rh_days = f'31 –¥–µ–∫–∞–±—Ä—è {first_year} –≥–æ–¥–∞ –∏ 1 ' \
                      f'—è–Ω–≤–∞—Ä—è {second_year} –≥–æ–¥–∞'
        elif lang == 'English':
            rh_days = f'31 December {first_year} and 1 ' \
                      f'January {second_year}'
        return rh_days

    # –µ—Å–ª–∏ 2 –¥–Ω—è –†–• –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—è—Ü–∞—Ö, –Ω–æ –≤ –æ–¥–Ω–æ–º –≥–æ–¥—É
    @staticmethod
    def two_days_in_different_months(
            lang: str,
            first_day: int,
            first_month: int,
            second_month: int,
            year: int
    ) -> str:
        rh_days = ''
        if lang == 'Russian':
            rh_days = f'{first_day} –∏ 1 {data.gr_months_index[first_month]} ' \
                      f'–∏ {data.gr_months_index[second_month]} {year} –≥–æ–¥–∞'
        elif lang == 'English':
            rh_days = f'{first_day} and 1 ' \
                      f'{data.gr_months_index_en[first_month]}' \
                      f' and {data.gr_months_index_en[second_month]} {year}'
        return rh_days

    # –µ—Å–ª–∏ –≤ –†–• 2 –¥–Ω—è
    @staticmethod
    def two_days(
            lang: str,
            first_day: int,
            second_day: int,
            month: int,
            year: int
    ) -> str:
        rh_days = ''
        if lang == 'Russian':
            rh_days = f'{first_day} –∏ {second_day} ' \
                      f'{data.gr_months_index[month]} {year} –≥–æ–¥–∞'
        elif lang == 'English':
            rh_days = f'{first_day} and {second_day} ' \
                      f'{data.gr_months_index_en[month]} {year}'
        return rh_days

    # –µ—Å–ª–∏ –≤ –†–• 1 –¥–µ–Ω—å –≤—ã–ø–∞–¥–∞–µ—Ç –Ω–∞ 1 —è–Ω–≤–∞—Ä—è
    @staticmethod
    def one_day_first_day_of_jan(lang: str, year: int) -> str:
        rh_days = ''
        if lang == 'Russian':
            rh_days = f'1 —è–Ω–≤–∞—Ä—è {year} –≥–æ–¥–∞'
        elif lang == 'English':
            rh_days = f'1 January {year}'
        return rh_days

    # –µ—Å–ª–∏ –≤ –†–• 1 –¥–µ–Ω—å –≤—ã–ø–∞–¥–∞–µ—Ç –Ω–∞ –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞
    @staticmethod
    def one_day_first_day_of_month(
            lang: str,
            month: int,
            year: int
    ) -> str:
        rh_days = ''
        if lang == 'Russian':
            rh_days = f'1 {data.gr_months_index[month]} {year} –≥–æ–¥–∞'
        elif lang == 'English':
            rh_days = f'1 {data.gr_months_index_en[month]} {year}'
        return rh_days

    # –µ—Å–ª–∏ –≤ –†–• 1 –¥–µ–Ω—å
    @staticmethod
    def one_day(
            lang: str,
            day: int,
            month: int,
            year: int
    ) -> str:
        rh_days = ''
        if lang == 'Russian':
            rh_days = f'{day} {data.gr_months_index[month]} {year} –≥–æ–¥–∞'
        elif lang == 'English':
            rh_days = f'{day} {data.gr_months_index_en[month]} {year}'
        return rh_days

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    @staticmethod
    def get_rh_day_of_week(
            lang: str,
            first_day: int,
            second_day=None
    ) -> str:
        day_of_week = ''
        if second_day:
            if lang == 'Russian':
                day_of_week = f'{data.days_ru[first_day]}-' \
                              f'{data.days_ru[second_day]}'
            elif lang == 'English':
                day_of_week = f'{data.days_en[first_day]}-' \
                              f'{data.days_en[second_day]}'
        elif not second_day:
            if lang == 'Russian':
                day_of_week = f'{data.days_ru[first_day]}'
            elif lang == 'English':
                day_of_week = f'{data.days_en[first_day]}'
        return day_of_week

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–ª–∞–¥
    @staticmethod
    def get_molad_str(
            lang: str,
            day: int,
            month: str,
            day_of_week: str,
            nhours: int,
            hours: str,
            nminutes: int,
            nchalakim: int,
            chalakim: str
    ) -> str:
        molad_str = ''
        if lang == 'Russian':
            molad_str = f'{day} {data.gr_months[month]}, ' \
                        f'{data.gr_dayofweek[day_of_week]},^' \
                        f'{nhours} {data.hours.get(hours[-1:], "—á–∞—Å–æ–≤")} ' \
                        f'{nminutes} ' \
                        f'{data.minutes.get(nminutes, "–º–∏–Ω—É—Ç")} –∏ ' \
                        f'{nchalakim} {data.chalakim.get(chalakim, "—á–∞—Å—Ç–µ–π")}'
        elif lang == 'English':
            molad_str = f'{day} {month}, {day_of_week},^' \
                        f'{nhours} {data.hours_e.get(hours, "hours")} ' \
                        f'{nminutes} ' \
                        f'{data.minutes_e.get(nminutes, "minutes")} and ' \
                        f'{nchalakim} ' \
                        f'{data.chalakim_e.get(chalakim, "chalakim")}'
        return molad_str

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –†–•
    @staticmethod
    def get_rh_str(
            lang: str,
            month: str,
            length: int,
            rosh_hodesh: str,
            molad: str
    ) -> str:
        rh = ''
        if lang == 'Russian':
            rh = f'–ú–µ—Å—è—Ü:|{data.jewish_months[month]}\n' \
                 f'–ß–∏—Å–ª–æ –¥–Ω–µ–π:|{length} ' \
                 f'{data.length_r[f"{length}"]}\n' \
                 f'–î–∞—Ç–∞:|{rosh_hodesh}\n–ú–æ–ª–∞–¥:|{molad}'
        elif lang == 'English':
            rh = f'Month:|{month}\n' \
                 f'Number of days:|{length} ' \
                 f'{data.length_e[f"{length}"]}\n' \
                 f'Date:|{rosh_hodesh}\nMolad:|{molad}'
        return rh


# –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–Ø –î–õ–Ø –®–ê–ë–ë–ê–¢–ê
class Shabos(object):

    # –¥–ª—è —à–∞–±–±–∞—Ç–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å –∑–º–∞–Ω–∏–º
    @staticmethod
    def shabos_with_latitude_error(lang: str, parasha: str) -> str:
        shabos_str = ''
        if lang == 'Russian':
            shabos_str = f'*–®–∞–±–±–∞—Ç*\n\nüìú *–ù–µ–¥–µ–ª—å–Ω–∞—è –≥–ª–∞–≤–∞:* ' \
                         f'{data.parashat[parasha]}\n\n' \
                         f'–í –¥–∞–Ω–Ω—ã—Ö —à–∏—Ä–æ—Ç–∞—Ö –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ' \
                         f'–∑–º–∞–Ω–∏–º –∏–∑-–∑–∞ –ø–æ–ª—è—Ä–Ω–æ–≥–æ –¥–Ω—è/–ø–æ–ª—è—Ä–Ω–æ–π –Ω–æ—á–∏.'
        elif lang == 'English':
            shabos_str = f'*Shabbos*\n\nüìú *Parshat hashavua:* {parasha}\n\n' \
                         f'In these latitudes zmanim is impossible' \
                         f' to determine because of polar night/day.'
        return shabos_str

    # –¥–ª—è —à–∞–±–±–∞—Ç–æ–≤ –≤ —Å–µ–≤–µ—Ä–Ω—ã—Ö —à–∏—Ä–æ—Ç–∞—Ö —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ —Ä–∞–Ω–Ω–µ–º –∑–∞–∂–∏–≥–∞–Ω–∏–∏
    @staticmethod
    def shabos_with_warning(
            lang: str,
            parasha: str,
            cl: str,
            th: str
    ) -> str:
        shabos_str = ''
        if lang == 'Russian':
            shabos_str = f'*–®–∞–±–±–∞—Ç*\n\nüìú *–ù–µ–¥–µ–ª—å–Ω–∞—è –≥–ª–∞–≤–∞:* ' \
                         f'{data.parashat[parasha]}\n' \
                         f'üïØ *–ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π:* {cl}\n' \
                         f'‚ú® *–í—ã—Ö–æ–¥ –∑–≤—ë–∑–¥:* {th}\n\n' \
                         f'*–í–Ω–∏–º–∞–Ω–∏–µ!* –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Ç–æ—á–Ω–∏—Ç—å' \
                         f' –≤—Ä–µ–º—è –∑–∞–∂–∏–≥–∞–Ω–∏—è —Å–≤–µ—á–µ–π —É —Ä–∞–≤–≤–∏–Ω–∞ –æ–±—â–∏–Ω—ã!'
        elif lang == 'English':
            shabos_str = f'*Shabbos*\n\nüìú *Parshat hashavua:* {parasha}\n' \
                         f'üïØ *Candle lighting:* {cl}\n' \
                         f'‚ú® *Tzeit hakochavim:* {th}\n\n' \
                         f'*Notice!* You should specify time of candle' \
                         f' lighting with the rabbi of your community.'
        return shabos_str

    # –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —à–∞–±–±–∞—Ç–æ–≤
    @staticmethod
    def shabos(
            lang: str,
            parasha: str,
            cl: str,
            th: str
    ) -> str:
        shabos_str = ''
        if lang == 'Russian':
            shabos_str = f'*–®–∞–±–±–∞—Ç*\n\nüìú *–ù–µ–¥–µ–ª—å–Ω–∞—è –≥–ª–∞–≤–∞:* ' \
                         f'{data.parashat[parasha]}\n' \
                         f'üïØ *–ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π:* {cl}\n' \
                         f'‚ú® *–í—ã—Ö–æ–¥ –∑–≤—ë–∑–¥:* {th}'
        elif lang == 'English':
            if parasha == 'PESACH_VIII':
                parasha = 'PESACH'
            shabos_str = f'*Shabbos*\n\nüìú *Parshat hashavua:* {parasha}\n' \
                         f'üïØ *Candle lighting:* {cl}\n' \
                         f'‚ú® *Tzeit hakochavim:* {th}'
        return shabos_str

    # –¥–ª—è —à–∞–±–±–∞—Ç–æ–≤ –≤ –∏–∑—Ä–∞–∏–ª–µ
    @staticmethod
    def shabos_in_israel(
            lang: str,
            parasha: str,
            cl_eighteen: str,
            cl_thirty: str,
            cl_forty: str,
            th: str
    ):
        shabos_str = ''
        if lang == 'Russian':
            shabos_str = f'*–®–∞–±–±–∞—Ç*\n\nüìú *–ù–µ–¥–µ–ª—å–Ω–∞—è –≥–ª–∞–≤–∞:* ' \
                         f'{data.parashat[parasha]}\n' \
                         f'üïØ *–ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π:*\n' \
                         f'*18* –º–∏–Ω—É—Ç –¥–æ —à–∫–∏–∏: {cl_eighteen}\n' \
                         f'*30* –º–∏–Ω—É—Ç –¥–æ —à–∫–∏–∏: {cl_thirty}\n' \
                         f'*40* –º–∏–Ω—É—Ç –¥–æ —à–∫–∏–∏: {cl_forty}\n\n' \
                         f'‚ú® *–í—ã—Ö–æ–¥ –∑–≤—ë–∑–¥:* {th}'
        elif lang == 'English':
            shabos_str = f'*Shabbos*\n\nüìú *Parshat hashavua:* {parasha}\n' \
                         f'üïØ *Candle lighting:*\n' \
                         f'*18* minutes before sunset: {cl_eighteen}\n' \
                         f'*30* minutes before sunset: {cl_thirty}\n' \
                         f'*40* minutes before sunset: {cl_forty}\n\n' \
                         f'‚ú® *Tzeit hakochavim:* {th}'
        return shabos_str

    # –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–¥–≤–∏–≥–∞ –∑–∞–∂–∏–≥–∞–Ω–∏–π
    @staticmethod
    def shabos_candle_offset(lang: str) -> str:
        responses = {
            'Russian': '–í—ã–±–µ—Ä–∏—Ç–µ, –∑–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –®–∫–∏–∏ '
                       '–±—É–¥–µ—Ç –∑–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π:',
            'English': '',  # TODO –ø–µ—Ä–µ–≤–æ–¥
            'Hebrew': ''  # TODO –ø–µ—Ä–µ–≤–æ–¥
        }
        response = responses.get(lang, '')
        return response

    # –≤—ã–±—Ä–∞–Ω —Ç–æ—Ç –∂–µ —Å–¥–≤–∏–≥
    @staticmethod
    def same_offset_error(lang: str) -> str:
        responses = {
            'Russian': '–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–¥–≤–∏–≥, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.',
            'English': '',  # TODO –ø–µ—Ä–µ–≤–æ–¥
            'Hebrew': ''  # TODO –ø–µ—Ä–µ–≤–æ–¥
        }
        response = responses.get(lang, '')
        return response


# –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–Ø –î–õ–Ø –ó–ú–ê–ù–ò–ú
class Zmanim(object):

    # –æ—à–∏–±–∫–∞ –ø–æ–ª—è—Ä–Ω—ã—Ö —à–∏—Ä–æ—Ç
    @staticmethod
    def get_polar_error(lang: str) -> str:
        error_message = ''
        if lang == 'Russian':
            error_message = '–í –¥–∞–Ω–Ω—ã—Ö —à–∏—Ä–æ—Ç–∞—Ö –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ' \
                            '–∑–º–∞–Ω–∏–º –∏–∑-–∑–∞ –ø–æ–ª—è—Ä–Ω–æ–≥–æ –¥–Ω—è/–ø–æ–ª—è—Ä–Ω–æ–π –Ω–æ—á–∏.'
        elif lang == 'English':
            error_message = 'In these latitudes it is impossible to determine'\
                            ' because of polar night/day.'
        return error_message

    # –Ω–∞–∑–≤–∞–Ω–∏—è –∑–º–∞–Ω–∏–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    @staticmethod
    def get_zman_name(zman: str, lang: str) -> str:
        zman_name = ''
        if lang == 'Russian':
            zman_name = data.zmanim_ru[zman]
        elif lang == 'English':
            zman_name = ''
        return zman_name


# –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–Ø –î–õ–Ø –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–• –§–£–ù–ö–¶–ò–ô
class Utils(object):
    # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã
    @staticmethod
    def location_received(lang: str) -> str:
        response = ''
        if lang == 'Russian':
            response = '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ ' \
                       '–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º.'
        elif lang == 'English':
            response = 'Location has been received, now you can start ' \
                       'working with the bot'
        return response

    # –æ—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∑
    @staticmethod
    def failed_check_tz(lang: str) -> str:
        response = ''
        if lang == 'Russian':
            response = '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –í–æ–∑–º–æ–∂–Ω–æ ' \
                       '–≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –¥–∞–ª–µ–∫–æ –æ—Ç –±–µ—Ä–µ–≥–∞ –∏–ª–∏ —É–∫–∞–∑–∞–ª–∏ ' \
                       '–Ω–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ' \
                       ' –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑'
        elif lang == 'English':
            response = 'Time zone could not be determined. –†robably, you' \
                       ' –∞re far from —Åoast or indicate incorrect ' \
                       'coordinates. Try to send your location again.'
        return response

    # –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
    @staticmethod
    def incorrect_text(lang: str) -> str:
        responses = {
            'Russian': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ '
                       '–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö.',
            'English': 'Incorrect command. Please, choose one of the options '
                       'on the buttons'
        }
        response = responses.get(lang, '')
        return response

    # –∑–∞–ø—Ä–æ—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    @staticmethod
    def request_location(lang: str) -> str:
        responses = {
            'Russian': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –Ω–∞–∂–∞–≤ –Ω–∞ '
                       '–∫–Ω–æ–ø–∫—É.\n*–í–Ω–∏–º–∞–Ω–∏–µ*! Telegram –Ω–∞ –ü–ö –ø–æ–∫–∞ —á—Ç–æ –Ω–µ '
                       '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–∞–∫–∏–º –º–µ—Ç–æ–¥–æ–º. –ß—Ç–æ–±—ã '
                       '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å –ü–ö, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º '
                       '–≤–∏–¥–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä "_55.5, 37.7_", –ª–∏–±–æ '
                       '–ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–µ–æ–º–µ—Ç–∫–æ–π.',
            'English': 'Please, send new location by tapping the button.\n'
                       '*Notice* that Telegram on PC is not supported yet '
                       'sending locations in this way. In order to send '
                       'location on PC, send it like text, for example, '
                       '"_55.5, 37.7_", or forward message with location here.'
        }
        response = responses.get(lang, '')
        return response

    # —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ
    @staticmethod
    def report(lang: str) -> str:
        responses = {
            'Russian': '–ß—Ç–æ–±—ã —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–æ–º—É '
                       '–∏–∑ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: \nt.me/benyomin \nt.me/Meir_Yartzev'
                       '\nt.me/APJIAC \n'
                       '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å —á–∞—Å—Ç–æ '
                       '–∑–∞–¥–∞–≤–∞–µ–º—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø–æ –∫–Ω–æ–ø–∫–µ "–ß–∞–í–æ" ',
            'English': 'For bug report please write to one of developers: \n'
                       't.me/benyomin \nt.me/Meir_Yartzev \nt.me/APJIAC\n'
                       'Please, make sure that you '
                       'had been read F.A.Q. available by "F.A.Q." button'
        }
        response = responses.get(lang, '')
        return response

    # –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –¥–ª—è –∑–º–∞–Ω–∏–º
    @staticmethod
    def request_date_for_zmanim(lang: str) -> str:
        responses = {
            'Russian': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã '
                       '—Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å _–∑–º–∞–Ω–∏–º_ *–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì*',
            'English': 'Please enter the date to calculate the _Zmanim_  '
                       'for your selection *in the format DD.MM.YYYY*'
        }
        response = responses.get(lang, '')
        return response

    # –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞
    @staticmethod
    def incorrect_date_format(lang: str) -> str:
        responses = {
            'Russian': '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '
                       '–¥–∞—Ç—É –≤ *—Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì*',
            'English': 'Incorrect date. \nPlease input date *in '
                       'the format DD.MM.YYYY*'
        }
        response = responses.get(lang, '')
        return response

    # —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –¥–∞—Ç–µ
    @staticmethod
    def incorrect_date_value(lang: str) -> str:
        responses = {
            'Russian': '–í–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '
                       '–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ *—Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì*',
            'English': 'The date that you entered doesn\'t exist, '
                       'please enter the correct date in format DD.MM.YYYY'
        }
        response = responses.get(lang, '')
        return response

    # –≤–∫–ª/–æ—Ç–∫–ª –∏–∑—Ä–∞–∏–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º
    @staticmethod
    def diaspora(lang: str, status: bool) -> str:
        if status:
            diaspora_activated = data.diaspora_mode_activated[lang]
        else:
            diaspora_activated = data.diaspora_mode_deactivated[lang]
        responses = {
            'Russian': f'–†–µ–∂–∏–º –¥–∏–∞—Å–ø–æ—Ä—ã {diaspora_activated}\n'
                       f'–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.',
            'English': '',  # TODO –ø–µ—Ä–µ–≤–æ–¥
            'Hebrew': ''  # TODO –ø–µ—Ä–µ–≤–æ–¥
        }
        response = responses.get(lang, '')
        return response

    @staticmethod
    def diaspora_status_allert(lang: str, status: bool) -> str:
        if status:
            responses = {
                'Russian': '–†–µ–∂–∏–º –¥–∏–∞—Å–ø–æ—Ä—ã –≤–∫–ª—é—á–µ–Ω!',
                'English': 'Diaspora mode enabled!',  #
                'Hebrew': ''  # TODO –ø–µ—Ä–µ–≤–æ–¥
            }
        else:
            responses = {
                'Russian': '–†–µ–∂–∏–º –¥–∏–∞—Å–ø–æ—Ä—ã –≤—ã–∫–ª—é—á–µ–Ω!',
                'English': 'Diaspora mode disabled!',  #
                'Hebrew': ''  # TODO –ø–µ—Ä–µ–≤–æ–¥
            }
        response = responses.get(lang, '')
        return response


# –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–Ø –î–õ–Ø –ü–†–ê–ó–î–ù–ò–ö–û–í
class Holidays(object):

    # –ö–æ–≥–¥–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–∞
    @staticmethod
    def polar_area(lang: str) -> str:
        ra_time = ''
        if lang == 'Russian':
            ra_time = '\n–í –¥–∞–Ω–Ω—ã—Ö —à–∏—Ä–æ—Ç–∞—Ö –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å' \
                         ' –∑–º–∞–Ω–∏–º –∏–∑-–∑–∞ –ø–æ–ª—è—Ä–Ω–æ–≥–æ –¥–Ω—è/–ø–æ–ª—è—Ä–Ω–æ–π –Ω–æ—á–∏'
        elif lang == 'English':
            ra_time = '\nIn these latitudes zmanim is impossible' \
                        ' to determine because of polar night/day'

        return ra_time

    # –ö–æ–≥–¥–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –ø—Ä–∞–∑–¥–Ω–∏–∫–∞
    @staticmethod
    def lighting(
            lang: str,
            light_day: str,
            light_month: str,
            light_time: str,
            avdala_day: str,
            avdala_month: str,
            avdala_time: str
    ) -> str:
        lighting_time = ''
        if lang == 'Russian':
            lighting_time = 'üïØ –ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π {}' \
                             ' {}:' \
                             ' *{:.5s}*\n' \
                             '‚ú® –ê–≤–¥–∞–ª–∞ {}' \
                             ' {}:' \
                             ' *{:.5s}*'\
                             .format(light_day,
                                     data.gr_months_index[light_month],
                                     light_time, avdala_day,
                                     data.gr_months_index[avdala_month],
                                     avdala_time)
        elif lang == 'English':
            lighting_time = 'üïØ Candle lighting {}' \
                             ' {}:' \
                             ' *{:.5s}*\n' \
                             '‚ú® Avdala {}' \
                             ' {}:' \
                             ' *{:.5s}*' \
                             .format(light_day,
                                     data.gr_months_index_en[light_month],
                                     light_time, avdala_day,
                                     data.gr_months_index_en[avdala_month],
                                     avdala_time)

        return lighting_time
    
    # –ö–æ–≥–¥–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ –∏ –ø–µ—Ä–µ–¥ –Ω–∏–º —à–∞–±–±–∞—Ç
    @staticmethod
    def shabbat_before_holiday_israel(
            lang: str,
            light_shab_day: str,
            light_shab_month: str,
            light_shab_time: str,
            light_day: str,
            light_month: str,
            light_time: str,
            avdala_day: str,
            avdala_month: str,
            avdala_time: str
    ) -> str:
        lighting_time = ''
        if lang == 'Russian':
            lighting_time = 'üïØ –ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π (–®–∞–±–±–∞—Ç) {}' \
                            ' {}:' \
                            ' *{:.5s}*\n' \
                            '‚ú®üïØ –ê–≤–¥–∞–ª–∞ –∏ –∑–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π {}' \
                            ' {}:' \
                            ' *{:.5s}*\n' \
                            '‚ú® –ê–≤–¥–∞–ª–∞ {}' \
                            ' {}:' \
                            ' *{:.5s}*' \
                .format(light_shab_day,
                        data.gr_months_index[light_shab_month],
                        light_shab_time,
                        light_day,
                        data.gr_months_index[light_month],
                        light_time, avdala_day,
                        data.gr_months_index[avdala_month],
                        avdala_time)
        elif lang == 'English':
            lighting_time = 'üïØ Candle lighting (Shabbat) {}' \
                            ' {}:' \
                            ' *{:.5s}*\n' \
                            '‚ú®üïØ Avdala and candle lighting {}' \
                            ' {}:' \
                            ' *{:.5s}*\n' \
                            '‚ú® Avdala {}' \
                            ' {}:' \
                            ' *{:.5s}*' \
                .format(light_shab_day,
                        data.gr_months_index_en[light_shab_month],
                        light_shab_time,
                        light_day,
                        data.gr_months_index_en[light_month],
                        light_time, avdala_day,
                        data.gr_months_index_en[avdala_month],
                        avdala_time)

        return lighting_time
    
    # –î–ª—è –ô–æ–º-–ö–∏–ø—É—Ä–∞
    @staticmethod
    def lighting_fast(
            lang: str,
            light_day: str,
            light_month: str,
            light_time: str,
            avdala_day: str,
            avdala_month: str,
            avdala_time: str
    ) -> str:
        fast_time = ''
        if lang == 'Russian':
            fast_time = 'üïØ –ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π –∏ –Ω–∞—á–∞–ª–æ –ø–æ—Å—Ç–∞ {}' \
                        ' {}:' \
                        ' *{:.5s}*\n' \
                        '‚ú® –ê–≤–¥–∞–ª–∞ –∏ –∫–æ–Ω–µ—Ü –ø–æ—Å—Ç–∞ {}' \
                        ' {}:' \
                        ' *{:.5s}*' \
                .format(light_day, data.gr_months_index[light_month],
                        light_time, avdala_day,
                        data.gr_months_index[avdala_month], avdala_time)
        elif lang == 'English':
            fast_time = 'üïØ Candle lighting and the fast begins {}' \
                        ' {}:' \
                        ' *{:.5s}*\n' \
                        '‚ú® Avdala and the fast ends {}' \
                        ' {}:' \
                        ' *{:.5s}*' \
                .format(light_day, data.gr_months_index_en[light_month],
                        light_time, avdala_day,
                        data.gr_months_index_en[avdala_month], avdala_time)

        return fast_time

    # –ö–æ–≥–¥–∞ 2 –¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ –∏ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö —à–∞–±–±–∞—Ç
    @staticmethod
    def lighting_shabbat(
            lang: str,
            light_day: str,
            light_month: str,
            light_time: str,
            light_shab_day: str,
            light_shab_month: str,
            light_shab_time: str,
            avdala_day: str,
            avdala_month: str,
            avdala_time: str
    ) -> str:
        ra_time = ''
        if lang == 'Russian':
            ra_time = 'üïØ –ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π {}' \
                      ' {}:' \
                      ' *{:.5s}*\n' \
                      'üïØ –ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π (–®–∞–±–±–∞—Ç) {} {}: *{:.5s}*\n' \
                      '‚ú® –ê–≤–¥–∞–ª–∞ {}' \
                      ' {}:' \
                      ' *{:.5s}*' \
                .format(light_day, data.gr_months_index[light_month],
                        light_time, light_shab_day,
                        data.gr_months_index[light_shab_month],
                        light_shab_time, avdala_day,
                        data.gr_months_index[avdala_month],
                        avdala_time)
        elif lang == 'English':
            ra_time = 'üïØ Candle lighting {}' \
                      ' {}:' \
                      ' *{:.5s}*\n' \
                      'üïØ Candle lighting (Shabbat) {} {}: *{:.5s}*\n' \
                      '‚ú® Avdala {}' \
                      ' {}:' \
                      ' *{:.5s}*' \
                .format(light_day, data.gr_months_index_en[light_month],
                        light_time, light_shab_day,
                        data.gr_months_index_en[light_shab_month],
                        light_shab_time, avdala_day,
                        data.gr_months_index_en[avdala_month],
                        avdala_time)

        return ra_time
    
    # –ö–æ–≥–¥–∞ 2 –¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ –∏ –ø–µ—Ä–µ–¥ –Ω–∏–º–∏ —à–∞–±–±–∞—Ç
    @staticmethod
    def shabbat_before_holiday_diaspora(
            lang: str,
            light_shab_day: str,
            light_shab_month: str,
            light_shab_time: str,
            light_1_day: str,
            light_1_month: str,
            light_1_time: str,
            light_2_day: str,
            light_2_month: str,
            light_2_time: str,
            avdala_day: str,
            avdala_month: str,
            avdala_time: str
    ) -> str:
        ra_time = ''
        if lang == 'Russian':
            ra_time = 'üïØ –ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π (–®–∞–±–±–∞—Ç) {}' \
                      ' {}:' \
                      ' *{:.5s}*\n' \
                      '‚ú®üïØ –ê–≤–¥–∞–ª–∞ –∏ –∑–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π {}' \
                      ' {}:' \
                      ' *{:.5s}*\n' \
                      'üïØ –ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π {}' \
                      ' {}:' \
                      ' *{:.5s}*\n' \
                      '‚ú® –ê–≤–¥–∞–ª–∞ {}' \
                      ' {}:' \
                      ' *{:.5s}*' \
                .format(light_shab_day, data.gr_months_index[light_shab_month],
                        light_shab_time, light_1_day,
                        data.gr_months_index[light_1_month],
                        light_1_time, light_2_day,
                        data.gr_months_index[light_2_month],
                        light_2_time, avdala_day,
                        data.gr_months_index[avdala_month], avdala_time)
        elif lang == 'English':
            ra_time = 'üïØ Candle lighting (Shabbat) {}' \
                      ' {}:' \
                      ' *{:.5s}*\n' \
                      '‚ú®üïØ Avdala and candle lighting {}' \
                      ' {}:' \
                      ' *{:.5s}*\n' \
                      'üïØ Candle lighting {}' \
                      ' {}: ' \
                      '*{:.5s}*\n' \
                      '‚ú® Avdala {}' \
                      ' {}:' \
                      ' *{:.5s}*' \
                .format(light_shab_day,
                        data.gr_months_index_en[light_shab_month],
                        light_shab_time,
                        light_1_day, data.gr_months_index_en[light_1_month],
                        light_1_time, light_2_day,
                        data.gr_months_index_en[light_2_month], light_2_time,
                        avdala_day,
                        data.gr_months_index_en[avdala_month], avdala_time)

        return ra_time
    
    # 2 –¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ (–±–µ–∑ —à–∞–±–±–∞—Ç–∞)   
    @staticmethod
    def lighting_double(
            lang: str,
            light_1_day: str,
            light_1_month: str,
            light_1_time: str,
            light_2_day: str,
            light_2_month: str,
            light_2_time: str,
            avdala_day: str,
            avdala_month: str,
            avdala_time: str
    ) -> str:
        ra_time = ''
        if lang == 'Russian':
            ra_time = 'üïØ –ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π {}' \
                      ' {}:' \
                      ' *{:.5s}*\n' \
                      'üïØ –ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π {}' \
                      ' {}:' \
                      ' *{:.5s}*\n' \
                      '‚ú® –ê–≤–¥–∞–ª–∞ {}' \
                      ' {}:' \
                      ' *{:.5s}*' \
                .format(light_1_day, data.gr_months_index[light_1_month],
                        light_1_time, light_2_day,
                        data.gr_months_index[light_2_month],
                        light_2_time, avdala_day,
                        data.gr_months_index[avdala_month], avdala_time)
        elif lang == 'English':
            ra_time = 'üïØ Candle lighting {}' \
                      ' {}:' \
                      ' *{:.5s}*\n' \
                      'üïØ Candle lighting {}' \
                      ' {}:' \
                      ' *{:.5s}*\n' \
                      '‚ú® Avdala {}' \
                      ' {}:' \
                      ' *{:.5s}*' \
                .format(light_1_day, data.gr_months_index_en[light_1_month],
                        light_1_time, light_2_day,
                        data.gr_months_index_en[light_2_month],
                        light_2_time, avdala_day,
                        data.gr_months_index_en[avdala_month], avdala_time)

        return ra_time
    
    # 2 –¥–Ω—è –ø—Ä–∞–¥–Ω–∏–∫–∞ –∏ –ø–æ—Å–ª–µ –Ω–∏—Ö –∏–¥–µ—Ç —à–∞–±–±–∞—Ç
    @staticmethod
    def lighting_double_shabbat(
            lang: str,
            light_1_day: str,
            light_1_month: str,
            light_1_time: str,
            light_2_day: str,
            light_2_month: str,
            light_2_time: str,
            light_shab_day: str,
            light_shab_month: str,
            light_shab_time: str,
            avdala_day: str,
            avdala_month: str,
            avdala_time: str
    ) -> str:
        ra_time = ''
        if lang == 'Russian':
            ra_time = 'üïØ –ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π {}' \
                      ' {}:' \
                      ' *{:.5s}*\n' \
                      'üïØ –ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π {}' \
                      ' {}:' \
                      ' *{:.5s}*\n' \
                      'üïØ –ó–∞–∂–∏–≥–∞–Ω–∏–µ —Å–≤–µ—á–µ–π (–®–∞–±–±–∞—Ç) {}' \
                      ' {}:' \
                      ' *{:.5s}*\n' \
                      '‚ú® –ê–≤–¥–∞–ª–∞ {}' \
                      ' {}:' \
                      ' *{:.5s}*' \
                .format(light_1_day, data.gr_months_index[light_1_month],
                        light_1_time, light_2_day,
                        data.gr_months_index[light_2_month], light_2_time,
                        light_shab_day, data.gr_months_index[light_shab_month],
                        light_shab_time, avdala_day,
                        data.gr_months_index[avdala_month], avdala_time)
        elif lang == 'English':
            ra_time = 'üïØ Candle lighting {}' \
                      ' {}:' \
                      ' *{:.5s}*\n' \
                      'üïØ Candle lighting {}' \
                      ' {}:' \
                      ' *{:.5s}*\n' \
                      'üïØ Candle lighting (Shabbat) {}' \
                      ' {}: ' \
                      '*{:.5s}*\n' \
                      '‚ú® Avdala {}' \
                      ' {}:' \
                      ' *{:.5s}*' \
                .format(light_1_day, data.gr_months_index_en[light_1_month],
                        light_1_time, light_2_day,
                        data.gr_months_index_en[light_2_month], light_2_time,
                        light_shab_day,
                        data.gr_months_index_en[light_shab_month],
                        light_shab_time, avdala_day,
                        data.gr_months_index_en[avdala_month], avdala_time)

        return ra_time

    # –î–ª–∏–Ω–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ (–ü–µ–π—Å–∞—Ö, –•–∞–Ω—É–∫–∞; –°—É–∫–∫–æ—Ç –Ω–µ –≤—Ö–æ–¥–∏—Ç),
    # –¥–∞—Ç—ã –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–∞ 1 –≥—Ä–∏–≥–æ—Ä–∏–∞–Ω—Å–∫–∏–π –º–µ—Å—è—Ü
    @staticmethod
    def long_holiday(
            lang: str,
            day_start: str,
            day_end: str,
            month: str,
            year: int,
            weekday_start: str,
            weekday_end: str
    ) -> str:
        holiday_number = ''
        if lang == 'Russian':
            holiday_number = f'üìÖ –î–∞—Ç–∞: {day_start}-' \
                             f'{day_end}' \
                             f' {data.holi_month[month]}' \
                             f' {year} –≥–æ–¥a,' \
                             f' {data.hdays_of_7[weekday_start]}-' \
                             f'{data.hdays_of_7[weekday_end]}'
        elif lang == 'English':
            holiday_number = f'üìÖ Date: {day_start}-' \
                             f'{day_end}' \
                             f' {data.holi_month_en[month]}' \
                             f' {year}, ' \
                             f'{data.hdays_of_7_en[weekday_start]}-' \
                             f'{data.hdays_of_7_en[weekday_end]}'

        return holiday_number

    # –î–≤—É—Ö–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏, –¥–∞—Ç—ã –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–∞ 1 –≥—Ä–∏–≥–æ—Ä–∏–∞–Ω—Å–∫–∏–π –º–µ—Å—è—Ü
    @staticmethod
    def long_holiday_and(
            lang: str,
            day_start: str,
            day_end: str,
            month: str,
            year: int,
            weekday_start: str,
            weekday_end: str
    ) -> str:
        holiday_number = ''
        if lang == 'Russian':
            holiday_number = f'üìÖ –î–∞—Ç–∞: {day_start} –∏ ' \
                             f'{day_end}' \
                             f' {data.holi_month[month]}' \
                             f' {year} –≥–æ–¥a,' \
                             f' {data.hdays_of_7[weekday_start]}-' \
                             f'{data.hdays_of_7[weekday_end]}'
        elif lang == 'English':
            holiday_number = f'üìÖ Date: {day_start} and ' \
                             f'{day_end}' \
                             f' {data.holi_month_en[month]}' \
                             f' {year}, ' \
                             f'{data.hdays_of_7_en[weekday_start]}-' \
                             f'{data.hdays_of_7_en[weekday_end]}'

        return holiday_number

    # –î–ª–∏–Ω–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏, –¥–∞—Ç—ã –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–∞ 2 –≥—Ä–∏–≥–æ—Ä–∏–∞–Ω—Å–∫–∏—Ö –º–µ—Å—è—Ü–∞
    @staticmethod
    def long_holiday_jump(
            lang: str,
            day_start: str,
            month_start: str,
            day_end: str,
            month_end: str,
            year: int,
            weekday_start: str,
            weekday_end: str
    ) -> str:
        holiday_number = ''
        if lang == 'Russian':
            holiday_number = f'üìÖ –î–∞—Ç–∞: {day_start}' \
                             f' {data.holi_month[month_start]} - ' \
                             f'{day_end}' \
                             f' {data.holi_month[month_end]}' \
                             f' {year} –≥–æ–¥a,' \
                             f' {data.hdays_of_7[weekday_start]}-' \
                             f'{data.hdays_of_7[weekday_end]}'
        elif lang == 'English':
            holiday_number = f'üìÖ Date: {day_start}' \
                             f' {data.holi_month_en[month_start]} - ' \
                             f'{day_end}' \
                             f' {data.holi_month_en[month_end]}' \
                             f' {year}, ' \
                             f'{data.hdays_of_7_en[weekday_start]}-' \
                             f'{data.hdays_of_7_en[weekday_end]}'

        return holiday_number

    # –î–≤—É—Ö–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏, –¥–∞—Ç—ã –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–∞ 2 –≥—Ä–∏–≥–æ—Ä–∏–∞–Ω—Å–∫–∏—Ö –º–µ—Å—è—Ü–∞
    @staticmethod
    def long_holiday_jump_and(
            lang: str,
            day_start: str,
            month_start: str,
            day_end: str,
            month_end: str,
            year: int,
            weekday_start: str,
            weekday_end: str
    ) -> str:
        holiday_number = ''
        if lang == 'Russian':
            holiday_number = f'üìÖ –î–∞—Ç–∞: {day_start}' \
                             f' {data.holi_month[month_start]} –∏ ' \
                             f'{day_end}' \
                             f' {data.holi_month[month_end]}' \
                             f' {year} –≥–æ–¥a,' \
                             f' {data.hdays_of_7[weekday_start]}-' \
                             f'{data.hdays_of_7[weekday_end]}'
        elif lang == 'English':
            holiday_number = f'üìÖ Date: {day_start}' \
                             f' {data.holi_month_en[month_start]} and ' \
                             f'{day_end}' \
                             f' {data.holi_month_en[month_end]}' \
                             f' {year}, ' \
                             f'{data.hdays_of_7_en[weekday_start]}-' \
                             f'{data.hdays_of_7_en[weekday_end]}'

        return holiday_number

    # –û–¥–Ω–æ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
    @staticmethod
    def short_holiday(
            lang: str,
            day: str,
            month: str,
            year: int,
            weekday: str
    ) -> str:
        holiday_number = ''
        if lang == 'Russian':
            holiday_number = f'üìÖ –î–∞—Ç–∞: {day}' \
                             f' {data.holi_month[month]}' \
                             f' {year} –≥–æ–¥a,' \
                             f' {data.hdays_of_7[weekday]}'
        elif lang == 'English':
            holiday_number = f'üìÖ Date: {day}' \
                             f' {data.holi_month_en[month]}' \
                             f' {year},' \
                             f' {data.hdays_of_7_en[weekday]}'

        return holiday_number


class Converter(object):

    @staticmethod
    def welcome_to_converter(lang: str) -> str:
        responses = {
            'Russian': '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—ã –∏–∑ '
                       '–≥—Ä–∏–≥–æ—Ä–∏–∞–Ω—Å–∫–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ –µ–≤—Ä–µ–π—Å–∫–∏–π –∏ –æ–±—Ä–∞—Ç–Ω–æ, –∞ '
                       '—Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç—å –∑–º–∞–Ω–∏–º –Ω–∞ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É.\n'
                       '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º –≤–∞—Ä–∏–∞–Ω—Ç:',
            'English': 'W',  # TODO –ø–µ—Ä–µ–≤–æ–¥
            'Hebrew': ''  # TODO –ø–µ—Ä–µ–≤–æ–¥
        }
        response = responses.get(lang, '')
        return response

    # –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –¥–ª—è –≥—Ä–∏–≥ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
    @staticmethod
    def request_date_for_converter_greg(lang: str) -> str:
        responses = {
            'Russian': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≥—Ä–µ–≥–æ—Ä–∏–∞–Ω—Å–∫–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è, '
                       '–∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å '
                       '*–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì*',
            'English': 'Please enter the gregorian date to convert '
                       'for your selection *in the format DD.MM.YYYY*',
            'Hebrew': ''  # TODO –ø–µ—Ä–µ–≤–æ–¥
        }
        response = responses.get(lang, '')
        return response

    # –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –¥–ª—è –µ–≤—Ä –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
    @staticmethod
    def request_date_for_converter_heb(lang: str) -> str:
        responses = {
            'Russian': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –µ–≤—Ä–µ–π—Å–∫–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è, '
                       '–∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å '
                       '*–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î –º–µ—Å—è—Ü –ì–ì–ì–ì* (–Ω–∞–ø—Ä–∏–º–µ—Ä: `4 –∏—è—Ä 5778)`\n\n'
                       '_–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è '
                       '–µ–≤—Ä–µ–π—Å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤!_\n–Ω–∏—Å–∞–Ω, –∏—è—Ä, —Å–∏–≤–∞–Ω, —Ç–∞–º—É–∑, –∞–≤, '
                       '—ç–ª—É–ª—å, —Ç–∏—à—Ä–µ–π, —Ö–µ—à–≤–∞–Ω, –∫–∏—Å–ª–µ–≤, —Ç–µ–≤–µ—Ç, —à–≤–∞—Ç, –∞–¥–∞—Ä, '
                       '–∞–¥–∞—Ä 1, –∞–¥–∞—Ä 2',
            'English': 'Please enter the hebrew date to convert '
                       'for your selection *in the format DD month YYYY* '
                       '(For example: `4 iyar 5778`)\n\n'
                       '_Pay attention to the correct names of hebrew '
                       'months!_\nnisan, iyar, sivan, tamuz, av, elul, '
                       'tishrei, cheshvan, kislev, tevet, shevat, adar, adar 1'
                       ', adar 2',
            'Hebrew': ''  # TODO –ø–µ—Ä–µ–≤–æ–¥
        }
        response = responses.get(lang, '')
        return response

    # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–µ–≥–æ—Ä–∏–∞–Ω—Å–∫–æ–π –¥–∞—Ç—ã
    @staticmethod
    def convert_greg_to_heb(
            greg_date: tuple,
            day_of_week: int,
            heb_date: tuple,
            lang: str
    ) -> str:
        response = ''
        if lang == 'Russian':
            response = f'–ì—Ä–µ–≥–æ—Ä–∏–∞–Ω—Å–∫–∞—è –¥–∞—Ç–∞: *{greg_date[2]} ' \
                       f'{data.gr_months_index[greg_date[1]]} ' \
                       f'{greg_date[0]}* –≥–æ–¥–∞, {data.days_ru[day_of_week]}\n' \
                       f'–ï–≤—Ä–µ–π—Å–∫–∞—è –¥–∞—Ç–∞: *{heb_date[2]} ' \
                       f'{data.jewish_months_a[heb_date[1]]} {heb_date[0]}*'
        elif lang == 'English':
            response = f'Gregorian date: *{greg_date[2]} ' \
                       f'{data.greg_months_en[greg_date[1]]} ' \
                       f'{greg_date[0]}*, {data.days_en[day_of_week]}\n' \
                       f'Hebrew date: *{heb_date[2]} ' \
                       f'{heb_date[1]} {heb_date[0]}*'
        elif lang == 'Hebrew':
            response = f''  # TODO –ø–µ—Ä–µ–≤–æ–¥
        return response

    # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–≤—Ä–µ–π—Å–∫–æ–π –¥–∞—Ç—ã
    @staticmethod
    def convert_heb_to_greg(
            heb_date: tuple,
            day_of_week: int,
            greg_date: tuple,
            lang: str
    ) -> str:
        response = ''
        if lang == 'Russian':
            response = f'–ï–≤—Ä–µ–π—Å–∫–∞—è –¥–∞—Ç–∞: *{heb_date[2]} ' \
                       f'{data.heb_months_codes_ru[heb_date[1]]} ' \
                       f'{heb_date[0]}*\n–ì—Ä–µ–≥–æ—Ä–∏–∞–Ω—Å–∫–∞—è –¥–∞—Ç–∞: *{greg_date[2]} '\
                       f'{data.gr_months_index[greg_date[1]]} ' \
                       f'{greg_date[0]}* –≥–æ–¥–∞, {data.days_ru[day_of_week]}'

        elif lang == 'English':
            response = f'Hebrew date: *{heb_date[2]} ' \
                       f'{data.heb_months_codes_en[heb_date[1]]} ' \
                       f'{heb_date[0]}*\nGregorian date: *{greg_date[2]} ' \
                       f'{data.greg_months_en[greg_date[1]]} ' \
                       f'{greg_date[0]}*, {data.days_en[day_of_week]}' \

        elif lang == 'Hebrew':
            response = f''  # TODO –ø–µ—Ä–µ–≤–æ–¥
        return response

    # –≤—ã–¥–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
    @staticmethod
    def get_month_name(lang:str, name:str) -> str:
        response = ''
        if lang == 'Russian':
            response = data.heb_months_names_ru[name]
        elif lang == 'English':
            response = data.heb_months_names_en[name]
        elif lang == 'Hebrew':
            response = data.heb_months_names_he[name]
        return response

    # –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞
    @staticmethod
    def incorrect_heb_date_format(lang: str) -> str:
        responses = {
            'Russian': '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '
                       '–¥–∞—Ç—É –≤ *—Ñ–æ—Ä–º–∞—Ç–µ –î–î –º–µ—Å—è—Ü –ì–ì–ì–ì*\n\n'
                       '_–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è '
                       '–µ–≤—Ä–µ–π—Å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤!_\n–Ω–∏—Å–∞–Ω, –∏—è—Ä, —Å–∏–≤–∞–Ω, —Ç–∞–º—É–∑, –∞–≤, '
                       '—ç–ª—É–ª—å, —Ç–∏—à—Ä–µ–π, —Ö–µ—à–≤–∞–Ω, –∫–∏—Å–ª–µ–≤, —Ç–µ–≤–µ—Ç, —à–≤–∞—Ç, –∞–¥–∞—Ä, '
                       '–∞–¥–∞—Ä 1, –∞–¥–∞—Ä 2',
            'English': 'Incorrect date. \nPlease input date *in '
                       'the format DD month YYYY*_pay attention to the '
                       'correct names of hebrew months!_\nnisan, iyar, sivan, '
                       'tamuz, av, elul, tishrei, cheshvan, kislev, tevet, '
                       'shevat, adar, adar 1, adar 2',
            'Hebrew': ''  # TODO –ø–µ—Ä–µ–≤–æ–¥
        }
        response = responses.get(lang, '')
        return response

    # —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –¥–∞—Ç–µ
    @staticmethod
    def incorrect_heb_date_value(lang: str) -> str:
        responses = {
            'Russian': '–í–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '
                       '–¥–∞—Ç—É –≤ *—Ñ–æ—Ä–º–∞—Ç–µ –î–î –º–µ—Å—è—Ü –ì–ì–ì–ì*\n\n'
                       '_–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è '
                       '–µ–≤—Ä–µ–π—Å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤!_\n–Ω–∏—Å–∞–Ω, –∏—è—Ä, —Å–∏–≤–∞–Ω, —Ç–∞–º—É–∑, –∞–≤, '
                       '—ç–ª—É–ª—å, —Ç–∏—à—Ä–µ–π, —Ö–µ—à–≤–∞–Ω, –∫–∏—Å–ª–µ–≤, —Ç–µ–≤–µ—Ç, —à–≤–∞—Ç, –∞–¥–∞—Ä, '
                       '–∞–¥–∞—Ä 1, –∞–¥–∞—Ä 2',
            'English': 'The date that you entered doesn\'t exist. \n'
                       'Please input date *in the format DD month YYYY*\n'
                       '_pay attention to the correct names of hebrew '
                       'months!_\nnisan, iyar, sivan, tamuz, av, elul, '
                       'tishrei, cheshvan, kislev, tevet, shevat, adar, '
                       'adar 1, adar 2',
            'Hebrew': ''  # TODO –ø–µ—Ä–µ–≤–æ–¥
        }
        response = responses.get(lang, '')
        return response
